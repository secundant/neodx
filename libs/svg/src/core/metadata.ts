import { createTaskRunner } from '@neodx/internal/tasks';
import { parseAs } from '@neodx/internal/zod';
import type { Vfs } from '@neodx/vfs';
import { match } from 'ts-pattern';
import { z } from 'zod';
import {
  getAllSymbols,
  getSvgSizeProps,
  type SpriteAsset,
  type SpriteMeta,
  type SvgLogger,
  type SymbolMeta
} from './shared.ts';

export type SpritesMetadataParams = z.infer<typeof MetadataParamsSchema>;
export type SpritesMetadataInput = z.input<typeof MetadataInputSchema>;
export type SpritesMetadata = ReturnType<typeof createSpritesMetadata>;

export function createSpritesMetadata(
  input: SpritesMetadataInput,
  {
    vfs,
    log
  }: {
    log: SvgLogger;
    vfs: Vfs;
  }
) {
  const params = parseAs('metadata', MetadataInputSchema, input);

  if (!params) return null;
  const { name, path, typeName } = params;
  const { task } = createTaskRunner({ log });
  const render = task('render', async (sprites: SpriteMeta[]) => {
    await vfs.write(
      path,
      template
        .replaceAll('export ', '')
        .replace(
          '// $VARIABLES$',
          `export const ${name} = defineSpriteMap(${tmpl.array(sprites, renderSprite)})`
        )
        .replace(
          '// $TYPES$',
          `export type ${typeName} = {
  ${sprites.map(renderSpriteType).join('\n  ')}
}`
        )
    );
  });

  if (params.runtime) log.warn('`metadata.runtime` option is deprecated, remove it from your code');

  return {
    params: Object.freeze(params),
    render
  };
}

const renderSpriteType = (sprite: SpriteMeta) =>
  `"${sprite.name}": ${getAllSymbols(sprite)
    .map(it => `"${it.name}"`)
    .join(' | ')};`;

const renderSprite = ({ name, assets }: SpriteMeta) => `defineSprite(
  '${name}',
  ${tmpl.array(assets, renderAsset)}
)`;
const renderAsset = (asset: SpriteAsset) => `defineSpriteAsset(
  ${tmpl.array(asset.symbols, renderSymbol)},
  ${match(asset)
    .with({ type: 'external' }, it => `defineExternalAssetMeta('${it.fileName}')`)
    .with({ type: 'inject' }, it => `defineInjectedAssetMeta('${it.content}')`)
    .with({ type: 'fetch-and-inject' }, it => `defineFetchAndInjectedAssetMeta('${it.fileName}')`)
    .exhaustive()}
)`;
const renderSymbol = ({ name, node, __: { id } }: SymbolMeta) => {
  const { width, height, viewBox } = getSvgSizeProps(node);
  const idArg = id === name ? '' : `'${id}',`;

  return `defineSpriteSymbol(
     '${name}',
     ${width},
     ${height},
     ${viewBox === `0 0 ${width} ${height}` ? (idArg ? 'undefined,' : '') : `'${viewBox}',`}
     ${idArg}
   )`;
};

const tmpl = {
  array: <T>(items: T[], map: (item: T) => string) => `[${items.map(map).join(', ')}]`
};

/** Parameters for `metadata` option */
export const MetadataParamsSchema = z.object({
  /**
   * Path to generated sprites metadata - types and runtime information
   * @example "src/sprites/meta.ts"
   */
  path: z.string(),
  /**
   * Name for the variable generated for sprites metadata
   * @default "sprites"
   * @example Generated metadata
   * export const sprites = defineSpriteMap({
   *   common: defineSprite('common', 'common.svg', [
   *     defineSpriteSymbol('close', 16, 16),
   *     defineSpriteSymbol('add', 16, 16),
   *   ]),
   * });
   * // ...
   * console.log(sprites.common.symbols.close); // { name: 'close', axis: 'xy', width: 16, height: 16, viewBox: '0 0 16 16' }
   */
  name: z.string().default('sprites'),
  /**
   * Name of the type generated for sprites metadata
   * @default "SpritesMeta"
   * @example Generated metadata
   * export type SpritesMeta = typeof sprites;
   */
  typeName: z.string().default('SpritesMeta'),
  /**
   * @deprecated Not used anymore, remove it from your code
   */
  runtime: z.any().optional()
});

/** Any possible value for `metadata` option */
export const MetadataInputSchema = z.union([
  MetadataParamsSchema,
  z.string().transform(path => MetadataParamsSchema.parse({ path })),
  z.literal(false).transform(() => null)
]);

// TODO Copy template automatically
const template = `
/// <reference lib="dom" />
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

export const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(
  all: [...Sprites]
) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(\`Symbol "\${symbolName}" is not found in "\${spriteName}"\`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSprite?: typeof loadSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSprite?: typeof mountSprite;
}

export const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? \`/\${baseUrl?.replace(/(^\\/)|(\\/$)/g, '')}/\${fileName}\`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSprite: load = loadSprite,
      mountSprite: mount = mountSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return \`#\${symbol.id}\`;
        case 'external':
          return \`\${getUrl(asset.meta.fileName, config?.baseUrl)}#\${symbol.id}\`;
        default:
          return null;
      }
    }
  };
};

export const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
export const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
export const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
export const defineSpriteAsset = <const Symbols extends readonly [...SvgSpriteSymbol[]]>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

export const defineNamedMap = <
  const Symbols extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Symbols]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Symbols]: Symbols[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [S in Symbols[number] as S['name']]: S;
  }
});

export const defineSpriteSymbol = <const Name extends string>(
  name: Name,
  width: number,
  height: number,
  viewBox?: string,
  id: string = name
) => ({
  id,
  name,
  width,
  height,
  viewBox: viewBox ?? \`0 0 \${width} \${height}\`
});

export type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

// $VARIABLES$

// $TYPES$

//#endregion
`;
