/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(all: [...Sprites]) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(`Symbol "${symbolName}" is not found in "${spriteName}"`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? `/${baseUrl?.replace(/(^\/)|(\/$)/g, '')}/${fileName}`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return `#${symbol.id}`;
        case 'external':
          return `${getUrl(asset.meta.fileName, config?.baseUrl)}#${symbol.id}`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <const Symbols extends readonly [...SvgSpriteSymbol[]]>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = `0 0 ${width} ${height}`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([
  defineSprite('sprite', [
    defineSpriteAsset(
      [
        defineSpriteSymbol(['close'], [48]),
        defineSpriteSymbol(['exit'], [16]),
        defineSpriteSymbol(['favourite'], [48]),
        defineSpriteSymbol(['folder-colored'], [16]),
        defineSpriteSymbol(['sort-by-visibility'], [16])
      ],
      defineExternalAssetMeta('sprite.svg')
    )
  ]),
  defineSprite('flags', [
    defineSpriteAsset(
      [
        defineSpriteSymbol(['ac', 'flags-ac-3acc0d1b'], [512]),
        defineSpriteSymbol(['ad', 'flags-ad-fc4f87b1'], [512]),
        defineSpriteSymbol(['ae', 'flags-ae-0f06b4c9'], [512]),
        defineSpriteSymbol(['af', 'flags-af-c9bceca8'], [512])
      ],
      defineInjectedAssetMeta(
        '<svg width="0" height="0"><defs><mask id="flags-ac-ref-a-3acc0d1b"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask><mask id="flags-ad-ref-a-fc4f87b1"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask><mask id="flags-ae-ref-a-0f06b4c9"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask><mask id="flags-af-ref-a-c9bceca8"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask></defs><symbol xmlns="http://www.w3.org/2000/svg" id="flags-ac-3acc0d1b" viewBox="0 0 512 512"><g mask="url(#flags-ac-ref-a-3acc0d1b)"><path fill="#0052b4" d="M256 0h256v512H0V256Z"/><path fill="#eee" d="M0 0v32l32 32L0 96v160h32l32-32 32 32h32v-83l83 83h45l-8-16 8-15v-14l-83-83h83V96l-32-32 32-32V0H96L64 32 32 0Z"/><path fill="#d80027" d="M32 0v32H0v64h32v160h64V96h160V32H96V0Zm96 128 128 128v-31l-97-97z"/><path fill="#6da544" d="m320 144 48-80 48 80z"/><path fill="#338af3" d="M320 144v77c0 36 48 48 48 48s48-12 48-48v-77z"/><path fill="#6da544" d="m368 160-48 67c2 11 9 19 16 26l32-45 32 45c8-7 14-15 16-26z"/><circle cx="368" cy="144" r="48" fill="#acabb1"/><rect width="32" height="128" x="288" y="128" fill="#ff9811" rx="16" ry="16"/><rect width="32" height="128" x="416" y="128" fill="#ff9811" rx="16" ry="16"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="flags-ad-fc4f87b1" viewBox="0 0 512 512"><g mask="url(#flags-ad-ref-a-fc4f87b1)"><path fill="#0052b4" d="M0 0h144.7l36 254.6-36 257.4H0z"/><path fill="#d80027" d="M367.3 0H512v512H367.3l-29.7-257.3z"/><path fill="#ffda44" d="M144.7 0h222.6v512H144.7z"/><path fill="#d80027" d="M256 354.5V256h66.8v47.3zm-66.8-165.3H256V256h-66.8z"/><path fill="#ff9811" d="M289.4 167a22.3 22.3 0 0 0-33.4-19.3 22.1 22.1 0 0 0-11.1-3c-12.3 0-22.3 10-22.3 22.3H167v111.3c0 41.4 32.9 65.4 58.7 77.8a22.1 22.1 0 0 0-3 11.2 22.3 22.3 0 0 0 33.3 19.3 22.1 22.1 0 0 0 11.1 3 22.3 22.3 0 0 0 19.2-33.5c25.8-12.4 58.7-36.4 58.7-77.8V167zm22.3 111.3c0 5.8 0 23.4-27.5 40.9a136.5 136.5 0 0 1-28.2 13.3c-7-2.4-17.8-6.7-28.2-13.3-27.5-17.5-27.5-35.1-27.5-41v-77.9h111.4z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="flags-ae-0f06b4c9" viewBox="0 0 512 512"><g mask="url(#flags-ae-ref-a-0f06b4c9)"><path fill="#a2001d" d="M0 0h167l52.3 252L167 512H0z"/><path fill="#eee" d="m167 167 170.8-44.6L512 167v178l-173.2 36.9L167 345z"/><path fill="#6da544" d="M167 0h345v167H167z"/><path fill="#333" d="M167 345h345v167H167z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="flags-af-c9bceca8" viewBox="0 0 512 512"><g mask="url(#flags-af-ref-a-c9bceca8)"><path fill="#d80027" d="M144.7 0h222.6l37 257.7-37 254.3H144.7l-42.4-255.2z"/><path fill="#496e2d" d="M367.3 0H512v512H367.3z"/><path fill="#333" d="M0 0h144.7v512H0z"/><g fill="#ffda44"><path d="M256 167a89 89 0 1 0 0 178 89 89 0 0 0 0-178m0 144.7a55.7 55.7 0 1 1 0-111.4 55.7 55.7 0 0 1 0 111.4"/><path d="M256 222.6c-12.3 0-22.3 10-22.3 22.3v33.4h44.6v-33.4c0-12.3-10-22.3-22.3-22.3"/></g></g></symbol></svg>'
      )
    )
  ]),
  defineSprite('logos', [
    defineSpriteAsset(
      [defineSpriteSymbol(['linkedin'], [140, 34]), defineSpriteSymbol(['twitter'], [248, 204])],
      defineExternalAssetMeta('logos.svg')
    )
  ])
]);

export type SpritesMeta = {
  sprite: 'close' | 'exit' | 'favourite' | 'folder-colored' | 'sort-by-visibility';
  flags: 'ac' | 'ad' | 'ae' | 'af';
  logos: 'linkedin' | 'twitter';
};

//#endregion
