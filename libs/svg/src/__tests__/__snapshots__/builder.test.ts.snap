// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`sprites builder > inlining > should inline all symbols with any kind of reference 1`] = `
[
  [
    "create",
    "src/metadata.ts",
    "
/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(
  all: [...Sprites]
) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(\`Symbol "\${symbolName}" is not found in "\${spriteName}"\`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? \`/\${baseUrl?.replace(/(^\\/)|(\\/$)/g, '')}/\${fileName}\`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return \`#\${symbol.id}\`;
        case 'external':
          return \`\${getUrl(asset.meta.fileName, config?.baseUrl)}#\${symbol.id}\`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <
  const Symbols extends readonly [...SvgSpriteSymbol[]]
>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = \`0 0 \${width} \${height}\`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([defineSprite(
  'sprite',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["animated-mask", "sprite-animated-mask-79bb4e7e"],
     [200]
   ), defineSpriteSymbol(
     ["animated-pattern", "sprite-animated-pattern-cc20ebf7"],
     [200]
   ), defineSpriteSymbol(
     ["animated-symbol", "sprite-animated-symbol-54cc15ca"],
     [200]
   ), defineSpriteSymbol(
     ["animated", "sprite-animated-17e071ee"],
     [200]
   ), defineSpriteSymbol(
     ["combined-filter", "sprite-combined-filter-0c0e9338"],
     [200]
   ), defineSpriteSymbol(
     ["dynamic-filter", "sprite-dynamic-filter-c60a732e"],
     [200]
   ), defineSpriteSymbol(
     ["filter", "sprite-filter-82c7504c"],
     [120]
   ), defineSpriteSymbol(
     ["global-mask", "sprite-global-mask-c3391966"],
     [512]
   ), defineSpriteSymbol(
     ["linear-gradient", "sprite-linear-gradient-0540f7a7"],
     [100]
   ), defineSpriteSymbol(
     ["mask", "sprite-mask-92d45947"],
     [200]
   ), defineSpriteSymbol(
     ["mixed-animation-pattern", "sprite-mixed-animation-pattern-141ec3ea"],
     [200]
   ), defineSpriteSymbol(
     ["mixed-animation", "sprite-mixed-animation-788302b2"],
     [200]
   ), defineSpriteSymbol(
     ["mixed-gradient", "sprite-mixed-gradient-836b6a20"],
     [200]
   ), defineSpriteSymbol(
     ["mixed-mask", "sprite-mixed-mask-90b4524c"],
     [200]
   ), defineSpriteSymbol(
     ["mixed", "sprite-mixed-5a7e85ab"],
     [200]
   ), defineSpriteSymbol(
     ["pattern-mask", "sprite-pattern-mask-91767886"],
     [200]
   ), defineSpriteSymbol(
     ["pattern", "sprite-pattern-90f4a9fd"],
     [100]
   ), defineSpriteSymbol(
     ["radial-gradient", "sprite-radial-gradient-4264c741"],
     [100]
   ), defineSpriteSymbol(
     ["text-clip", "sprite-text-clip-44a576e7"],
     [200]
   ), defineSpriteSymbol(
     ["text-path", "sprite-text-path-c2c6d8cf"],
     [500, 200]
   )],
  defineInjectedAssetMeta('<svg width="0" height="0"><defs><linearGradient id="sprite-animated-mask-ref-a-79bb4e7e" x1="0%" x2="100%" y1="0%" y2="0%"><stop offset="0%" stop-color="red"/><stop offset="100%" stop-color="#ff0"/></linearGradient><linearGradient id="sprite-animated-mask-ref-b-79bb4e7e" x1="0%" x2="100%" y1="0%" y2="100%"><stop offset="0%" stop-color="#00f"><animate attributeName="stop-color" dur="3s" repeatCount="indefinite" values="blue;purple;blue"/></stop><stop offset="100%" stop-color="green"><animate attributeName="stop-color" dur="3s" repeatCount="indefinite" values="green;yellow;green"/></stop></linearGradient><linearGradient id="sprite-animated-ref-a-17e071ee" x1="0%" x2="100%" y1="0%" y2="100%"><stop offset="0%" stop-color="red"><animate attributeName="stop-color" dur="4s" repeatCount="indefinite" values="red;yellow;red"/></stop><stop offset="100%" stop-color="#00f"><animate attributeName="stop-color" dur="4s" repeatCount="indefinite" values="blue;green;blue"/></stop></linearGradient><linearGradient id="sprite-linear-gradient-ref-a-0540f7a7" x1="0%" x2="100%" y1="0%" y2="100%"><stop offset="0%" style="stop-color:#ff0;stop-opacity:1"/><stop offset="100%" style="stop-color:red;stop-opacity:1"/></linearGradient><linearGradient id="sprite-mixed-animation-ref-a-788302b2" x1="0%" x2="100%" y1="0%" y2="100%"><stop offset="0%" stop-color="#00f"/><stop offset="100%" stop-color="red"/></linearGradient><linearGradient id="sprite-mixed-gradient-ref-a-836b6a20" x1="0" x2="200" y1="0" y2="200" gradientUnits="userSpaceOnUse"><stop offset="0" style="stop-color:#fff"/><stop offset="1" style="stop-color:#00f"/></linearGradient><linearGradient id="sprite-mixed-gradient-ref-b-836b6a20" x1="200" x2="0" y1="0" y2="200" gradientUnits="userSpaceOnUse"><stop offset="0" style="stop-color:#fff"/><stop offset="1" style="stop-color:#00f"/></linearGradient><linearGradient id="sprite-mixed-ref-a-5a7e85ab" x1="0%" x2="100%" y1="0%" y2="100%"><stop offset="0%" style="stop-color:#0f0;stop-opacity:1"/><stop offset="100%" style="stop-color:#00f;stop-opacity:1"/></linearGradient><mask id="sprite-animated-mask-ref-c-79bb4e7e"><rect width="100%" height="100%" fill="url(#sprite-animated-mask-ref-a-79bb4e7e)"/></mask><mask id="sprite-global-mask-ref-a-c3391966"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask><mask id="sprite-mask-ref-a-92d45947"><path fill="currentColor" d="M0 0h200v200H0z"/><circle cx="100" cy="100" r="50"/></mask><mask id="sprite-mixed-mask-ref-a-90b4524c"><rect width="100%" height="100%" fill="currentColor"/><circle cx="50" cy="50" r="50"/><path d="M50 50h100v100H50z"/></mask><mask id="sprite-mixed-ref-c-5a7e85ab"><path fill="currentColor" d="M0 0h200v200H0z"/><circle cx="100" cy="100" r="70"/></mask><mask id="sprite-pattern-mask-ref-b-91767886"><path fill="url(#sprite-pattern-mask-ref-a-91767886)" d="M0 0h200v200H0z"/></mask><pattern id="sprite-animated-pattern-ref-a-cc20ebf7" width="40" height="40" patternUnits="userSpaceOnUse"><path fill="currentColor" d="M0 0h40v40H0z"/><circle cx="20" cy="20" r="10" fill="currentColor"><animate attributeName="r" dur="1s" from="10" repeatCount="indefinite" to="15"/></circle></pattern><pattern id="sprite-mixed-animation-pattern-ref-a-141ec3ea" width="40" height="40" patternUnits="userSpaceOnUse"><circle cx="20" cy="20" r="10" fill="currentColor"/><circle cx="20" cy="20" r="5" fill="currentColor"><animate attributeName="cx" dur="2s" from="10" repeatCount="indefinite" to="30"/><animate attributeName="cy" dur="2s" from="10" repeatCount="indefinite" to="30"/></circle></pattern><pattern id="sprite-pattern-mask-ref-a-91767886" width="10" height="10" patternUnits="userSpaceOnUse"><path fill="currentColor" d="M0 0h10v10H0z"/><circle cx="5" cy="5" r="4"/></pattern><pattern id="sprite-pattern-ref-a-90f4a9fd" width="10" height="10" patternUnits="userSpaceOnUse"><path fill="currentColor" d="M0 0h10v10H0z"/><circle cx="5" cy="5" r="4" fill="currentColor"/></pattern><filter id="sprite-combined-filter-ref-a-0c0e9338" width="200%" height="200%" x="0" y="0"><feGaussianBlur in="SourceGraphic" result="blur" stdDeviation="4"/><feColorMatrix in="blur" result="matrixOut" values="0 0 0 0 0 0 0 0 0.5 0 0 0 0 0.5 0 0 0 0 1 0"/><feMerge><feMergeNode in="matrixOut"/><feMergeNode in="SourceGraphic"/></feMerge></filter><filter id="sprite-dynamic-filter-ref-a-c60a732e"><feTurbulence baseFrequency=".02" numOctaves="3" result="noise" type="fractalNoise"/><feDisplacementMap in="SourceGraphic" in2="noise" scale="43"/><animate attributeName="baseFrequency" dur="10s" repeatCount="indefinite" values="0.05;0.1;0.05"/></filter><filter id="sprite-filter-ref-a-82c7504c" x="0" y="0"><feGaussianBlur in="SourceGraphic" stdDeviation="15"/></filter><filter id="sprite-mixed-animation-ref-b-788302b2" width="200%" height="200%" x="0" y="0"><feOffset dx="5" dy="5" in="SourceAlpha" result="offOut"/><feGaussianBlur in="offOut" result="blurOut" stdDeviation="3"/><feBlend in="SourceGraphic" in2="blurOut"/></filter><radialGradient id="sprite-radial-gradient-ref-a-4264c741" cx="50%" cy="50%" r="50%" fx="50%" fy="50%"><stop offset="0%" style="stop-color:#fff;stop-opacity:0"/><stop offset="100%" style="stop-color:red;stop-opacity:1"/></radialGradient><clipPath id="sprite-text-clip-ref-a-44a576e7"><text x="10" y="100" fill="currentColor" font-family="Verdana" font-size="100">SVG</text></clipPath><symbol id="sprite-animated-symbol-ref-a-54cc15ca" viewBox="0 0 24 24"><path fill="currentColor" d="m12 2 3 6 7 1-5 5 1 7-6-3-6 3 1-7-5-5 7-1z"/></symbol><path id="sprite-text-path-ref-a-c2c6d8cf" d="M10 80c30-70 55-70 85 0s55 70 85 0"/></defs><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-animated-mask-79bb4e7e"><path fill="url(#sprite-animated-mask-ref-b-79bb4e7e)" d="M0 0h200v200H0z" mask="url(#sprite-animated-mask-ref-c-79bb4e7e)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-animated-pattern-cc20ebf7"><path fill="url(#sprite-animated-pattern-ref-a-cc20ebf7)" d="M0 0h200v200H0z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-animated-symbol-54cc15ca"><use x="20" y="20" href="#sprite-animated-symbol-ref-a-54cc15ca"><animateTransform attributeName="transform" dur="10s" from="0 12 12" repeatCount="indefinite" to="360 12 12" type="rotate"/></use><use x="80" y="20" href="#sprite-animated-symbol-ref-a-54cc15ca" transform="scale(.5)"/><use x="140" y="20" href="#sprite-animated-symbol-ref-a-54cc15ca" transform="scale(.75)"/><use x="20" y="80" href="#sprite-animated-symbol-ref-a-54cc15ca" transform="scale(.25)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-animated-17e071ee"><path fill="url(#sprite-animated-ref-a-17e071ee)" d="M0 0h200v200H0z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-combined-filter-0c0e9338"><circle cx="100" cy="100" r="60" fill="currentColor" filter="url(#sprite-combined-filter-ref-a-0c0e9338)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-dynamic-filter-c60a732e"><circle cx="100" cy="100" r="80" fill="currentColor" filter="url(#sprite-dynamic-filter-ref-a-c60a732e)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-filter-82c7504c"><path fill="currentColor" stroke="currentColor" stroke-width="3" d="M0 0h90v90H0z" filter="url(#sprite-filter-ref-a-82c7504c)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-global-mask-c3391966" viewBox="0 0 512 512"><g fill="currentColor" mask="url(#sprite-global-mask-ref-a-c3391966)"><path d="m0 0 8 22-8 23v23l32 54-32 54v32l32 48-32 48v32l32 54-32 54v68l22-8 23 8h23l54-32 54 32h32l48-32 48 32h32l54-32 54 32h68l-8-22 8-23v-23l-32-54 32-54v-32l-32-48 32-48v-32l-32-54 32-54V0l-22 8-23-8h-23l-54 32-54-32h-32l-48 32-48-32h-32l-54 32L68 0z"/><path d="M336 0v108L444 0Zm176 68L404 176h108zM0 176h108L0 68ZM68 0l108 108V0Zm108 512V404L68 512ZM0 444l108-108H0Zm512-108H404l108 108Zm-68 176L336 404v108z"/><path d="M0 0v45l131 131h45zm208 0v208H0v96h208v208h96V304h208v-96H304V0zm259 0L336 131v45L512 0zM176 336 0 512h45l131-131zm160 0 176 176v-45L381 336z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-linear-gradient-0540f7a7" viewBox="0 0 100 100"><ellipse cx="50" cy="50" fill="url(#sprite-linear-gradient-ref-a-0540f7a7)" rx="50" ry="25"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-mask-92d45947"><path fill="currentColor" d="M0 0h200v200H0z" mask="url(#sprite-mask-ref-a-92d45947)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-mixed-animation-pattern-141ec3ea"><path fill="url(#sprite-mixed-animation-pattern-ref-a-141ec3ea)" d="M0 0h200v200H0z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-mixed-animation-788302b2"><circle cx="100" cy="100" r="50" fill="url(#sprite-mixed-animation-ref-a-788302b2)" filter="url(#sprite-mixed-animation-ref-b-788302b2)"><animateTransform attributeName="transform" attributeType="XML" dur="10s" from="0 100 100" repeatCount="indefinite" to="360 100 100" type="rotate"/></circle></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-mixed-gradient-836b6a20"><circle cx="100" cy="100" r="100" fill="url(#sprite-mixed-gradient-ref-a-836b6a20)"/><circle cx="100" cy="100" r="50" fill="url(#sprite-mixed-gradient-ref-b-836b6a20)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-mixed-mask-90b4524c"><path fill="currentColor" d="M0 0h200v200H0z" mask="url(#sprite-mixed-mask-ref-a-90b4524c)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-mixed-5a7e85ab"><g fill="url(#sprite-mixed-ref-a-5a7e85ab)" mask="url(#sprite-mixed-ref-c-5a7e85ab)"><path d="M0 0h200v200H0z"/><circle cx="50" cy="50" r="50"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-pattern-mask-91767886"><path fill="currentColor" d="M0 0h200v200H0z" mask="url(#sprite-pattern-mask-ref-b-91767886)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-pattern-90f4a9fd"><path fill="url(#sprite-pattern-ref-a-90f4a9fd)" d="M0 0h100v100H0z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-radial-gradient-4264c741"><circle cx="50" cy="50" r="40" fill="url(#sprite-radial-gradient-ref-a-4264c741)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-text-clip-44a576e7"><path fill="currentColor" d="M0 0h200v200H0z" clip-path="url(#sprite-text-clip-ref-a-44a576e7)"/><text x="10" y="100" fill="currentColor" font-family="Verdana" font-size="100" opacity=".5">SVG</text></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-text-path-c2c6d8cf"><text fill="currentColor" font-family="Verdana" font-size="35"><textPath href="#sprite-text-path-ref-a-c2c6d8cf">We go up and down, then up again</textPath></text></symbol></svg>')
)]
)])

export type SpritesMeta = {
  "sprite": "animated-mask" | "animated-pattern" | "animated-symbol" | "animated" | "combined-filter" | "dynamic-filter" | "filter" | "global-mask" | "linear-gradient" | "mask" | "mixed-animation-pattern" | "mixed-animation" | "mixed-gradient" | "mixed-mask" | "mixed" | "pattern-mask" | "pattern" | "radial-gradient" | "text-clip" | "text-path";
}

//#endregion
",
  ],
]
`;

exports[`sprites builder > inlining > should inline sprite 1`] = `
[
  [
    "create",
    "src/metadata.ts",
    "
/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(
  all: [...Sprites]
) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(\`Symbol "\${symbolName}" is not found in "\${spriteName}"\`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? \`/\${baseUrl?.replace(/(^\\/)|(\\/$)/g, '')}/\${fileName}\`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return \`#\${symbol.id}\`;
        case 'external':
          return \`\${getUrl(asset.meta.fileName, config?.baseUrl)}#\${symbol.id}\`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <
  const Symbols extends readonly [...SvgSpriteSymbol[]]
>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = \`0 0 \${width} \${height}\`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([defineSprite(
  'sprite',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["plus"],
     [16]
   )],
  defineExternalAssetMeta('sprite.svg')
), defineSpriteAsset(
  [defineSpriteSymbol(
     ["mask", "sprite-mask-c3391966"],
     [512]
   )],
  defineInjectedAssetMeta('<svg width="0" height="0"><defs><mask id="sprite-mask-ref-a-c3391966"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask></defs><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-mask-c3391966" viewBox="0 0 512 512"><g fill="currentColor" mask="url(#sprite-mask-ref-a-c3391966)"><path d="m0 0 8 22-8 23v23l32 54-32 54v32l32 48-32 48v32l32 54-32 54v68l22-8 23 8h23l54-32 54 32h32l48-32 48 32h32l54-32 54 32h68l-8-22 8-23v-23l-32-54 32-54v-32l-32-48 32-48v-32l-32-54 32-54V0l-22 8-23-8h-23l-54 32-54-32h-32l-48 32-48-32h-32l-54 32L68 0z"/><path d="M336 0v108L444 0Zm176 68L404 176h108zM0 176h108L0 68ZM68 0l108 108V0Zm108 512V404L68 512ZM0 444l108-108H0Zm512-108H404l108 108Zm-68 176L336 404v108z"/><path d="M0 0v45l131 131h45zm208 0v208H0v96h208v208h96V304h208v-96H304V0zm259 0L336 131v45L512 0zM176 336 0 512h45l131-131zm160 0 176 176v-45L381 336z"/></g></symbol></svg>')
)]
)])

export type SpritesMeta = {
  "sprite": "plus" | "mask";
}

//#endregion
",
  ],
  [
    "create",
    "sprite.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="plus" fill="none" viewBox="0 0 16 16"><path fill="currentColor" fill-rule="evenodd" d="M7.5 1a.5.5 0 0 1 .5.5V7h5.5a.5.5 0 0 1 0 1H8v5.5a.5.5 0 0 1-1 0V8H1.5a.5.5 0 0 1 0-1H7V1.5a.5.5 0 0 1 .5-.5" clip-rule="evenodd"/></symbol></svg>",
  ],
]
`;

exports[`sprites builder > inlining > should merge all inlined assets 1`] = `
[
  [
    "create",
    "src/metadata.ts",
    "
/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(
  all: [...Sprites]
) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(\`Symbol "\${symbolName}" is not found in "\${spriteName}"\`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? \`/\${baseUrl?.replace(/(^\\/)|(\\/$)/g, '')}/\${fileName}\`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return \`#\${symbol.id}\`;
        case 'external':
          return \`\${getUrl(asset.meta.fileName, config?.baseUrl)}#\${symbol.id}\`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <
  const Symbols extends readonly [...SvgSpriteSymbol[]]
>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = \`0 0 \${width} \${height}\`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([defineSprite(
  'sprite',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["au", "sprite-au-2dca728e"],
     [512]
   ), defineSpriteSymbol(
     ["uk", "sprite-uk-c3391966"],
     [512]
   ), defineSpriteSymbol(
     ["us", "sprite-us-7f3012f5"],
     [512]
   )],
  defineInjectedAssetMeta('<svg width="0" height="0"><defs><mask id="sprite-au-ref-a-2dca728e"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask><mask id="sprite-uk-ref-a-c3391966"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask><mask id="sprite-us-ref-a-7f3012f5"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask></defs><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-au-2dca728e" viewBox="0 0 512 512"><g fill="currentColor" mask="url(#sprite-au-ref-a-2dca728e)"><path d="M0 0h512v512H0z"/><path d="m154 300 14 30 32-8-14 30 25 20-32 7 1 33-26-21-26 21 1-33-33-7 26-20-14-30 32 8zm222-27h47l-38 27 15-44 14 44zm7-162 7 15 16-4-7 15 12 10-15 3v17l-13-11-13 11v-17l-15-3 12-10-7-15 16 4zm57 67 7 15 16-4-7 15 12 10-15 3v16l-13-10-13 11v-17l-15-3 12-10-7-15 16 4zm-122 22 7 15 16-4-7 15 12 10-15 3v16l-13-10-13 11v-17l-15-3 12-10-7-15 16 4zm65 156 7 15 16-4-7 15 12 10-15 3v17l-13-11-13 11v-17l-15-3 12-10-7-15 16 4zM0 0v32l32 32L0 96v160h32l32-32 32 32h32v-83l83 83h45l-8-16 8-15v-14l-83-83h83V96l-32-32 32-32V0H96L64 32 32 0Z"/><path d="M32 0v32H0v64h32v160h64V96h160V32H96V0Zm96 128 128 128v-31l-97-97z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-uk-c3391966" viewBox="0 0 512 512"><g fill="currentColor" mask="url(#sprite-uk-ref-a-c3391966)"><path d="m0 0 8 22-8 23v23l32 54-32 54v32l32 48-32 48v32l32 54-32 54v68l22-8 23 8h23l54-32 54 32h32l48-32 48 32h32l54-32 54 32h68l-8-22 8-23v-23l-32-54 32-54v-32l-32-48 32-48v-32l-32-54 32-54V0l-22 8-23-8h-23l-54 32-54-32h-32l-48 32-48-32h-32l-54 32L68 0z"/><path d="M336 0v108L444 0Zm176 68L404 176h108zM0 176h108L0 68ZM68 0l108 108V0Zm108 512V404L68 512ZM0 444l108-108H0Zm512-108H404l108 108Zm-68 176L336 404v108z"/><path d="M0 0v45l131 131h45zm208 0v208H0v96h208v208h96V304h208v-96H304V0zm259 0L336 131v45L512 0zM176 336 0 512h45l131-131zm160 0 176 176v-45L381 336z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sprite-us-7f3012f5" viewBox="0 0 512 512"><g fill="currentColor" mask="url(#sprite-us-ref-a-7f3012f5)"><path d="M256 0h256v64l-32 32 32 32v64l-32 32 32 32v64l-32 32 32 32v64l-256 32L0 448v-64l32-32-32-32v-64z"/><path d="M224 64h288v64H224Zm0 128h288v64H256ZM0 320h512v64H0Zm0 128h512v64H0Z"/><path d="M0 0h256v256H0Z"/><path d="m187 243 57-41h-70l57 41-22-67zm-81 0 57-41H93l57 41-22-67zm-81 0 57-41H12l57 41-22-67zm162-81 57-41h-70l57 41-22-67zm-81 0 57-41H93l57 41-22-67zm-81 0 57-41H12l57 41-22-67Zm162-82 57-41h-70l57 41-22-67Zm-81 0 57-41H93l57 41-22-67zm-81 0 57-41H12l57 41-22-67Z"/></g></symbol></svg>')
)]
)])

export type SpritesMeta = {
  "sprite": "au" | "uk" | "us";
}

//#endregion
",
  ],
]
`;
