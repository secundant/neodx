// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`examples > "colors" example should generate files 1`] = `
[
  "assets",
  "assets/custom.svg",
  "assets/fill.svg",
  "assets/mixed.svg",
  "assets/stroke.svg",
  "generated",
  "generated/sprite-info.ts",
  "generated/sprite.svg",
]
`;

exports[`examples > "colors" example should replay same output 1`] = `
[
  [
    "create",
    "generated/sprite-info.ts",
    "
/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(
  all: [...Sprites]
) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(\`Symbol "\${symbolName}" is not found in "\${spriteName}"\`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? \`/\${baseUrl?.replace(/(^\\/)|(\\/$)/g, '')}/\${fileName}\`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return \`#\${symbol.id}\`;
        case 'external':
          return \`\${getUrl(asset.meta.fileName, config?.baseUrl)}#\${symbol.id}\`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <
  const Symbols extends readonly [...SvgSpriteSymbol[]]
>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = \`0 0 \${width} \${height}\`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([defineSprite(
  'sprite',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["custom"],
     [48]
   ), defineSpriteSymbol(
     ["fill"],
     [48]
   ), defineSpriteSymbol(
     ["mixed"],
     [48]
   ), defineSpriteSymbol(
     ["stroke"],
     [48]
   )],
  defineExternalAssetMeta('sprite.svg')
)]
)])

export type SpritesMeta = {
  "sprite": "custom" | "fill" | "mixed" | "stroke";
}

//#endregion
",
  ],
  [
    "create",
    "sprite.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="custom"><path stroke="#999" d="m12.5 40 2.15-8.5H7l.75-3h7.65l2.25-9H9l.75-3h8.65L20.5 8h2.95l-2.1 8.5h9.05L32.5 8h2.95l-2.1 8.5H41l-.75 3H32.6l-2.25 9H39l-.75 3H29.6L27.5 40h-3l2.15-8.5H17.6L15.5 40Zm5.85-11.5h9.05l2.25-9H20.6Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="fill"><path d="m12.45 37.65-2.1-2.1L21.9 24 10.35 12.45l2.1-2.1L24 21.9l11.55-11.55 2.1 2.1L26.1 24l11.55 11.55-2.1 2.1L24 26.1Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="mixed"><path fill="currentColor" stroke="currentColor" d="M6 42v-3h36v3Zm0-8.25v-3h23.6v3Zm0-8.25v-3h36v3Zm0-8.25v-3h23.6v3ZM6 9V6h36v3Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="stroke"><path stroke="currentColor" d="m24 41.95-2.05-1.85q-5.3-4.85-8.75-8.375t-5.5-6.3T4.825 20.4 4 15.85q0-4.5 3.025-7.525T14.5 5.3q2.85 0 5.275 1.35T24 10.55q2.1-2.7 4.45-3.975T33.5 5.3q4.45 0 7.475 3.025T44 15.85q0 2.3-.825 4.55T40.3 25.425t-5.5 6.3-8.75 8.375ZM24 38q5.05-4.65 8.325-7.975t5.2-5.825 2.7-4.45.775-3.9q0-3.3-2.1-5.425T33.5 8.3q-2.55 0-4.75 1.575T25.2 14.3h-2.45q-1.3-2.8-3.5-4.4T14.5 8.3q-3.3 0-5.4 2.125T7 15.85q0 1.95.775 3.925t2.7 4.5T15.7 30.1 24 38Zm0-14.85Z"/></symbol></svg>",
  ],
]
`;

exports[`examples > "colors-advanced" example should generate files 1`] = `
[
  "assets",
  "assets/close.svg",
  "assets/exit.svg",
  "assets/favourite.svg",
  "assets/flags",
  "assets/flags/ac.svg",
  "assets/flags/ad.svg",
  "assets/flags/ae.svg",
  "assets/flags/af.svg",
  "assets/folder-colored.svg",
  "assets/logos",
  "assets/logos/linkedin.svg",
  "assets/logos/twitter.svg",
  "assets/sort-by-visibility.svg",
  "generated",
  "generated/logos.svg",
  "generated/sprite-info.ts",
  "generated/sprite.svg",
]
`;

exports[`examples > "colors-advanced" example should replay same output 1`] = `
[
  [
    "create",
    "generated/sprite-info.ts",
    "
/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(
  all: [...Sprites]
) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(\`Symbol "\${symbolName}" is not found in "\${spriteName}"\`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? \`/\${baseUrl?.replace(/(^\\/)|(\\/$)/g, '')}/\${fileName}\`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return \`#\${symbol.id}\`;
        case 'external':
          return \`\${getUrl(asset.meta.fileName, config?.baseUrl)}#\${symbol.id}\`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <
  const Symbols extends readonly [...SvgSpriteSymbol[]]
>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = \`0 0 \${width} \${height}\`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([defineSprite(
  'sprite',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["close"],
     [48]
   ), defineSpriteSymbol(
     ["exit"],
     [16]
   ), defineSpriteSymbol(
     ["favourite"],
     [48]
   ), defineSpriteSymbol(
     ["folder-colored"],
     [16]
   ), defineSpriteSymbol(
     ["sort-by-visibility"],
     [16]
   )],
  defineExternalAssetMeta('sprite.svg')
)]
), defineSprite(
  'flags',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["ac", "flags-ac-3acc0d1b"],
     [512]
   ), defineSpriteSymbol(
     ["ad", "flags-ad-fc4f87b1"],
     [512]
   ), defineSpriteSymbol(
     ["ae", "flags-ae-0f06b4c9"],
     [512]
   ), defineSpriteSymbol(
     ["af", "flags-af-c9bceca8"],
     [512]
   )],
  defineInjectedAssetMeta('<svg width="0" height="0"><defs><mask id="flags-ac-ref-a-3acc0d1b"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask><mask id="flags-ad-ref-a-fc4f87b1"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask><mask id="flags-ae-ref-a-0f06b4c9"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask><mask id="flags-af-ref-a-c9bceca8"><circle cx="256" cy="256" r="256" fill="currentColor"/></mask></defs><symbol xmlns="http://www.w3.org/2000/svg" id="flags-ac-3acc0d1b" viewBox="0 0 512 512"><g mask="url(#flags-ac-ref-a-3acc0d1b)"><path fill="#0052b4" d="M256 0h256v512H0V256Z"/><path fill="#eee" d="M0 0v32l32 32L0 96v160h32l32-32 32 32h32v-83l83 83h45l-8-16 8-15v-14l-83-83h83V96l-32-32 32-32V0H96L64 32 32 0Z"/><path fill="#d80027" d="M32 0v32H0v64h32v160h64V96h160V32H96V0Zm96 128 128 128v-31l-97-97z"/><path fill="#6da544" d="m320 144 48-80 48 80z"/><path fill="#338af3" d="M320 144v77c0 36 48 48 48 48s48-12 48-48v-77z"/><path fill="#6da544" d="m368 160-48 67c2 11 9 19 16 26l32-45 32 45c8-7 14-15 16-26z"/><circle cx="368" cy="144" r="48" fill="#acabb1"/><rect width="32" height="128" x="288" y="128" fill="#ff9811" rx="16" ry="16"/><rect width="32" height="128" x="416" y="128" fill="#ff9811" rx="16" ry="16"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="flags-ad-fc4f87b1" viewBox="0 0 512 512"><g mask="url(#flags-ad-ref-a-fc4f87b1)"><path fill="#0052b4" d="M0 0h144.7l36 254.6-36 257.4H0z"/><path fill="#d80027" d="M367.3 0H512v512H367.3l-29.7-257.3z"/><path fill="#ffda44" d="M144.7 0h222.6v512H144.7z"/><path fill="#d80027" d="M256 354.5V256h66.8v47.3zm-66.8-165.3H256V256h-66.8z"/><path fill="#ff9811" d="M289.4 167a22.3 22.3 0 0 0-33.4-19.3 22.1 22.1 0 0 0-11.1-3c-12.3 0-22.3 10-22.3 22.3H167v111.3c0 41.4 32.9 65.4 58.7 77.8a22.1 22.1 0 0 0-3 11.2 22.3 22.3 0 0 0 33.3 19.3 22.1 22.1 0 0 0 11.1 3 22.3 22.3 0 0 0 19.2-33.5c25.8-12.4 58.7-36.4 58.7-77.8V167zm22.3 111.3c0 5.8 0 23.4-27.5 40.9a136.5 136.5 0 0 1-28.2 13.3c-7-2.4-17.8-6.7-28.2-13.3-27.5-17.5-27.5-35.1-27.5-41v-77.9h111.4z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="flags-ae-0f06b4c9" viewBox="0 0 512 512"><g mask="url(#flags-ae-ref-a-0f06b4c9)"><path fill="#a2001d" d="M0 0h167l52.3 252L167 512H0z"/><path fill="#eee" d="m167 167 170.8-44.6L512 167v178l-173.2 36.9L167 345z"/><path fill="#6da544" d="M167 0h345v167H167z"/><path fill="#333" d="M167 345h345v167H167z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="flags-af-c9bceca8" viewBox="0 0 512 512"><g mask="url(#flags-af-ref-a-c9bceca8)"><path fill="#d80027" d="M144.7 0h222.6l37 257.7-37 254.3H144.7l-42.4-255.2z"/><path fill="#496e2d" d="M367.3 0H512v512H367.3z"/><path fill="#333" d="M0 0h144.7v512H0z"/><g fill="#ffda44"><path d="M256 167a89 89 0 1 0 0 178 89 89 0 0 0 0-178m0 144.7a55.7 55.7 0 1 1 0-111.4 55.7 55.7 0 0 1 0 111.4"/><path d="M256 222.6c-12.3 0-22.3 10-22.3 22.3v33.4h44.6v-33.4c0-12.3-10-22.3-22.3-22.3"/></g></g></symbol></svg>')
)]
), defineSprite(
  'logos',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["linkedin"],
     [140, 34]
   ), defineSpriteSymbol(
     ["twitter"],
     [248, 204]
   )],
  defineExternalAssetMeta('logos.svg')
)]
)])

export type SpritesMeta = {
  "sprite": "close" | "exit" | "favourite" | "folder-colored" | "sort-by-visibility";
  "flags": "ac" | "ad" | "ae" | "af";
  "logos": "linkedin" | "twitter";
}

//#endregion
",
  ],
  [
    "create",
    "sprite.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="close"><path d="m12.45 37.65-2.1-2.1L21.9 24 10.35 12.45l2.1-2.1L24 21.9l11.55-11.55 2.1 2.1L26.1 24l11.55 11.55-2.1 2.1L24 26.1Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="exit" fill="none" viewBox="0 0 16 16"><path fill="currentColor" fill-rule="evenodd" d="M6 2h7a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-3H4v3a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v3h1V3a1 1 0 0 1 1-1" clip-rule="evenodd"/><path stroke="#DB3B4B" stroke-linecap="round" stroke-linejoin="round" d="M2.5 8H11m0 0L8.5 5.5M11 8l-2.5 2.5"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="favourite"><path fill="var(--icon-secondary-color)" d="m24 41.95-2.05-1.85q-5.3-4.85-8.75-8.375t-5.5-6.3T4.825 20.4 4 15.85q0-4.5 3.025-7.525T14.5 5.3q2.85 0 5.275 1.35T24 10.55q2.1-2.7 4.45-3.975T33.5 5.3q4.45 0 7.475 3.025T44 15.85q0 2.3-.825 4.55T40.3 25.425t-5.5 6.3-8.75 8.375ZM24 38q5.05-4.65 8.325-7.975t5.2-5.825 2.7-4.45.775-3.9q0-3.3-2.1-5.425T33.5 8.3q-2.55 0-4.75 1.575T25.2 14.3h-2.45q-1.3-2.8-3.5-4.4T14.5 8.3q-3.3 0-5.4 2.125T7 15.85q0 1.95.775 3.925t2.7 4.5T15.7 30.1 24 38m0-14.85"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="folder-colored" fill="none" viewBox="0 0 16 16"><path fill="#6C707E" d="M13 4H8.5L6.736 2.283A1 1 0 0 0 6.038 2H2.75C1.784 2 1 2.836 1 3.867v8.266C1 13.164 1.784 14 2.75 14H8v-1H2.75c-.354 0-.75-.326-.75-.867V3.867c0-.54.396-.867.75-.867h3.288l2.056 2H13a1 1 0 0 1 1 1v1h1V6a2 2 0 0 0-2-2"/><path fill="#3574F0" d="M13 12.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5zm-4 0a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5zm4-4a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="sort-by-visibility" fill="none" viewBox="0 0 16 16"><path fill="currentColor" fill-rule="evenodd" d="M7.854 10.854a.5.5 0 0 0-.708-.708L5 12.293V2.5a.5.5 0 0 0-1 0v9.793l-2.146-2.147a.5.5 0 0 0-.708.708l3 3a.5.5 0 0 0 .708 0z" clip-rule="evenodd"/><path fill="#DB3B4B" d="M10 6h4v3h-4z"/><path fill="currentColor" fill-rule="evenodd" d="M14 5V4a2 2 0 1 0-4 0v1a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1m-3-1a1 1 0 1 1 2 0v1h-2zm-1 5V6h4v3z" clip-rule="evenodd"/></symbol></svg>",
  ],
  [
    "create",
    "logos.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="linkedin" fill="none" viewBox="0 0 140 34"><g fill="#0A66C2"><path d="M137.201 31.805a.623.623 0 0 0 .63-.66c0-.469-.283-.692-.862-.692h-.937v2.452h.352v-1.07h.433l.01.014.672 1.056h.376l-.722-1.093zm-.407-.245h-.409v-.83h.518c.267 0 .572.044.572.394 0 .403-.308.436-.683.436M0 4.99h5.198v18.945h9.624v4.8H0zm17.12 7.645h4.993v16.09H17.12zm2.496-8A2.896 2.896 0 0 1 22.457 8.1a2.898 2.898 0 0 1-5.25 1.044 2.9 2.9 0 0 1 2.41-4.509m23.389.351H48v14.19l5.66-6.548h6.122l-6.554 7.449 6.417 8.655h-6.277l-5.302-7.953h-.065v7.952h-4.994zm-18.123 7.65h4.796v2.2h.068a5.25 5.25 0 0 1 4.728-2.6c5.065 0 5.997 3.334 5.997 7.665v8.824h-4.994V20.9c0-1.867-.035-4.267-2.601-4.267-2.596 0-2.997 2.033-2.997 4.132v7.957h-4.994z"/><path d="M70.298 18.809a2.995 2.995 0 0 0-3.066-3.066 3.33 3.33 0 0 0-3.529 3.066zm4.23 7.13A8.8 8.8 0 0 1 67.7 29.14c-4.994 0-8.992-3.335-8.992-8.5 0-5.164 3.998-8.497 8.992-8.497 4.668 0 7.595 3.33 7.595 8.498v1.566h-11.59a3.73 3.73 0 0 0 3.763 3.133 4.26 4.26 0 0 0 3.564-1.966zm11.176-9.415c-2.497 0-3.995 1.668-3.995 4.099s1.498 4.1 3.995 4.1c2.498 0 3.999-1.665 3.999-4.1s-1.499-4.099-3.999-4.099m8.597 12.199h-4.598v-2.134h-.068a6.28 6.28 0 0 1-4.965 2.533c-4.798 0-7.96-3.465-7.96-8.364 0-4.5 2.798-8.632 7.396-8.632 2.067 0 3.997.566 5.13 2.134h.065V4.985H94.3zm33.713.009h-4.994v-7.825c0-1.866-.033-4.268-2.598-4.268-2.601 0-2.999 2.033-2.999 4.132v7.96h-4.994v-16.09h4.795v2.198h.067a5.26 5.26 0 0 1 4.73-2.599c5.062 0 5.995 3.331 5.995 7.665zm-21.219-18.29a2.899 2.899 0 1 1-.001-5.799 2.899 2.899 0 0 1 .001 5.798m2.497 18.29h-5V12.64h5zM130.503.002h-28.72a2.457 2.457 0 0 0-2.487 2.43v28.855a2.463 2.463 0 0 0 2.487 2.433h28.72A2.465 2.465 0 0 0 133 31.287V2.43A2.465 2.465 0 0 0 130.503 0m6.333 29.36a2.299 2.299 0 1 0 .044 0zm0 4.336a2.01 2.01 0 0 1-1.883-1.214 2.03 2.03 0 0 1-.134-1.163 2.02 2.02 0 0 1 1.557-1.61 2.01 2.01 0 0 1 2.083.823c.227.327.352.715.358 1.114v.034a1.973 1.973 0 0 1-1.929 2.015z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" xml:space="preserve" id="twitter" viewBox="0 0 248 204"><path fill="#1d9bf0" d="M221.95 51.29c.15 2.17.15 4.34.15 6.53 0 66.73-50.8 143.69-143.69 143.69v-.04c-27.44.04-54.31-7.82-77.41-22.64 3.99.48 8 .72 12.02.73 22.74.02 44.83-7.61 62.72-21.66-21.61-.41-40.56-14.5-47.18-35.07a50.34 50.34 0 0 0 22.8-.87C27.8 117.2 10.85 96.5 10.85 72.46v-.64a50.2 50.2 0 0 0 22.92 6.32C11.58 63.31 4.74 33.79 18.14 10.71a143.33 143.33 0 0 0 104.08 52.76 50.53 50.53 0 0 1 14.61-48.25c20.34-19.12 52.33-18.14 71.45 2.19 11.31-2.23 22.15-6.38 32.07-12.26a50.7 50.7 0 0 1-22.2 27.93c10.01-1.18 19.79-3.86 29-7.95a102.6 102.6 0 0 1-25.2 26.16"/></symbol></svg>",
  ],
]
`;

exports[`examples > "groups-with-root" example should generate files 1`] = `
[
  "assets",
  "assets/common",
  "assets/common/close.svg",
  "assets/common/favourite.svg",
  "assets/format",
  "assets/format/align-left.svg",
  "assets/format/tag.svg",
  "generated",
  "generated/common.svg",
  "generated/format.svg",
  "generated/sprite-info.ts",
]
`;

exports[`examples > "groups-with-root" example should replay same output 1`] = `
[
  [
    "create",
    "generated/sprite-info.ts",
    "
/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(
  all: [...Sprites]
) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(\`Symbol "\${symbolName}" is not found in "\${spriteName}"\`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? \`/\${baseUrl?.replace(/(^\\/)|(\\/$)/g, '')}/\${fileName}\`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return \`#\${symbol.id}\`;
        case 'external':
          return \`\${getUrl(asset.meta.fileName, config?.baseUrl)}#\${symbol.id}\`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <
  const Symbols extends readonly [...SvgSpriteSymbol[]]
>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = \`0 0 \${width} \${height}\`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([defineSprite(
  'common',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["close"],
     [48]
   ), defineSpriteSymbol(
     ["favourite"],
     [48]
   )],
  defineExternalAssetMeta('common.svg')
)]
), defineSprite(
  'format',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["align-left"],
     [48]
   ), defineSpriteSymbol(
     ["tag"],
     [48]
   )],
  defineExternalAssetMeta('format.svg')
)]
)])

export type SpritesMeta = {
  "common": "close" | "favourite";
  "format": "align-left" | "tag";
}

//#endregion
",
  ],
  [
    "create",
    "common.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="close"><path d="m12.45 37.65-2.1-2.1L21.9 24 10.35 12.45l2.1-2.1L24 21.9l11.55-11.55 2.1 2.1L26.1 24l11.55 11.55-2.1 2.1L24 26.1Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="favourite"><path d="m24 41.95-2.05-1.85q-5.3-4.85-8.75-8.375t-5.5-6.3T4.825 20.4 4 15.85q0-4.5 3.025-7.525T14.5 5.3q2.85 0 5.275 1.35T24 10.55q2.1-2.7 4.45-3.975T33.5 5.3q4.45 0 7.475 3.025T44 15.85q0 2.3-.825 4.55T40.3 25.425t-5.5 6.3-8.75 8.375ZM24 38q5.05-4.65 8.325-7.975t5.2-5.825 2.7-4.45.775-3.9q0-3.3-2.1-5.425T33.5 8.3q-2.55 0-4.75 1.575T25.2 14.3h-2.45q-1.3-2.8-3.5-4.4T14.5 8.3q-3.3 0-5.4 2.125T7 15.85q0 1.95.775 3.925t2.7 4.5T15.7 30.1 24 38m0-14.85"/></symbol></svg>",
  ],
  [
    "create",
    "format.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="align-left"><path d="M6 42v-3h36v3Zm0-8.25v-3h23.6v3Zm0-8.25v-3h36v3Zm0-8.25v-3h23.6v3ZM6 9V6h36v3Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="tag"><path d="m12.5 40 2.15-8.5H7l.75-3h7.65l2.25-9H9l.75-3h8.65L20.5 8h2.95l-2.1 8.5h9.05L32.5 8h2.95l-2.1 8.5H41l-.75 3H32.6l-2.25 9H39l-.75 3H29.6L27.5 40h-3l2.15-8.5H17.6L15.5 40Zm5.85-11.5h9.05l2.25-9H20.6Z"/></symbol></svg>",
  ],
]
`;

exports[`examples > "groups-without-root" example should generate files 1`] = `
[
  "assets",
  "assets/common",
  "assets/common/close.svg",
  "assets/common/favourite.svg",
  "assets/format",
  "assets/format/align-left.svg",
  "assets/format/tag.svg",
  "generated",
  "generated/common.svg",
  "generated/format.svg",
  "generated/sprite-info.ts",
]
`;

exports[`examples > "groups-without-root" example should replay same output 1`] = `
[
  [
    "create",
    "generated/sprite-info.ts",
    "
/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(
  all: [...Sprites]
) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(\`Symbol "\${symbolName}" is not found in "\${spriteName}"\`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? \`/\${baseUrl?.replace(/(^\\/)|(\\/$)/g, '')}/\${fileName}\`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return \`#\${symbol.id}\`;
        case 'external':
          return \`\${getUrl(asset.meta.fileName, config?.baseUrl)}#\${symbol.id}\`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <
  const Symbols extends readonly [...SvgSpriteSymbol[]]
>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = \`0 0 \${width} \${height}\`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([defineSprite(
  'common',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["close"],
     [48]
   ), defineSpriteSymbol(
     ["favourite"],
     [48]
   )],
  defineExternalAssetMeta('common.svg')
)]
), defineSprite(
  'format',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["align-left"],
     [48]
   ), defineSpriteSymbol(
     ["tag"],
     [48]
   )],
  defineExternalAssetMeta('format.svg')
)]
)])

export type SpritesMeta = {
  "common": "close" | "favourite";
  "format": "align-left" | "tag";
}

//#endregion
",
  ],
  [
    "create",
    "common.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="close"><path d="m12.45 37.65-2.1-2.1L21.9 24 10.35 12.45l2.1-2.1L24 21.9l11.55-11.55 2.1 2.1L26.1 24l11.55 11.55-2.1 2.1L24 26.1Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="favourite"><path d="m24 41.95-2.05-1.85q-5.3-4.85-8.75-8.375t-5.5-6.3T4.825 20.4 4 15.85q0-4.5 3.025-7.525T14.5 5.3q2.85 0 5.275 1.35T24 10.55q2.1-2.7 4.45-3.975T33.5 5.3q4.45 0 7.475 3.025T44 15.85q0 2.3-.825 4.55T40.3 25.425t-5.5 6.3-8.75 8.375ZM24 38q5.05-4.65 8.325-7.975t5.2-5.825 2.7-4.45.775-3.9q0-3.3-2.1-5.425T33.5 8.3q-2.55 0-4.75 1.575T25.2 14.3h-2.45q-1.3-2.8-3.5-4.4T14.5 8.3q-3.3 0-5.4 2.125T7 15.85q0 1.95.775 3.925t2.7 4.5T15.7 30.1 24 38m0-14.85"/></symbol></svg>",
  ],
  [
    "create",
    "format.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="align-left"><path d="M6 42v-3h36v3Zm0-8.25v-3h23.6v3Zm0-8.25v-3h36v3Zm0-8.25v-3h23.6v3ZM6 9V6h36v3Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="tag"><path d="m12.5 40 2.15-8.5H7l.75-3h7.65l2.25-9H9l.75-3h8.65L20.5 8h2.95l-2.1 8.5h9.05L32.5 8h2.95l-2.1 8.5H41l-.75 3H32.6l-2.25 9H39l-.75 3H29.6L27.5 40h-3l2.15-8.5H17.6L15.5 40Zm5.85-11.5h9.05l2.25-9H20.6Z"/></symbol></svg>",
  ],
]
`;

exports[`examples > "metadata" example should generate files 1`] = `
[
  "assets",
  "assets/common",
  "assets/common/close.svg",
  "assets/common/favourite.svg",
  "assets/format",
  "assets/format/align-left.svg",
  "assets/format/tag.svg",
  "generated",
  "generated/common.fef39f3f.svg",
  "generated/format.d272be3f.svg",
  "generated/meta.ts",
]
`;

exports[`examples > "metadata" example should replay same output 1`] = `
[
  [
    "create",
    "generated/meta.ts",
    "
/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(
  all: [...Sprites]
) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(\`Symbol "\${symbolName}" is not found in "\${spriteName}"\`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? \`/\${baseUrl?.replace(/(^\\/)|(\\/$)/g, '')}/\${fileName}\`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return \`#\${symbol.id}\`;
        case 'external':
          return \`\${getUrl(asset.meta.fileName, config?.baseUrl)}#\${symbol.id}\`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <
  const Symbols extends readonly [...SvgSpriteSymbol[]]
>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = \`0 0 \${width} \${height}\`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([defineSprite(
  'common',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["close"],
     [48]
   ), defineSpriteSymbol(
     ["favourite"],
     [48]
   )],
  defineExternalAssetMeta('common.fef39f3f.svg')
)]
), defineSprite(
  'format',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["align-left"],
     [48]
   ), defineSpriteSymbol(
     ["tag"],
     [48]
   )],
  defineExternalAssetMeta('format.d272be3f.svg')
)]
)])

export type SpritesMeta = {
  "common": "close" | "favourite";
  "format": "align-left" | "tag";
}

//#endregion
",
  ],
  [
    "create",
    "common.fef39f3f.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="close"><path d="m12.45 37.65-2.1-2.1L21.9 24 10.35 12.45l2.1-2.1L24 21.9l11.55-11.55 2.1 2.1L26.1 24l11.55 11.55-2.1 2.1L24 26.1Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="favourite"><path d="m24 41.95-2.05-1.85q-5.3-4.85-8.75-8.375t-5.5-6.3T4.825 20.4 4 15.85q0-4.5 3.025-7.525T14.5 5.3q2.85 0 5.275 1.35T24 10.55q2.1-2.7 4.45-3.975T33.5 5.3q4.45 0 7.475 3.025T44 15.85q0 2.3-.825 4.55T40.3 25.425t-5.5 6.3-8.75 8.375ZM24 38q5.05-4.65 8.325-7.975t5.2-5.825 2.7-4.45.775-3.9q0-3.3-2.1-5.425T33.5 8.3q-2.55 0-4.75 1.575T25.2 14.3h-2.45q-1.3-2.8-3.5-4.4T14.5 8.3q-3.3 0-5.4 2.125T7 15.85q0 1.95.775 3.925t2.7 4.5T15.7 30.1 24 38m0-14.85"/></symbol></svg>",
  ],
  [
    "create",
    "format.d272be3f.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="align-left"><path d="M6 42v-3h36v3Zm0-8.25v-3h23.6v3Zm0-8.25v-3h36v3Zm0-8.25v-3h23.6v3ZM6 9V6h36v3Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="tag"><path d="m12.5 40 2.15-8.5H7l.75-3h7.65l2.25-9H9l.75-3h8.65L20.5 8h2.95l-2.1 8.5h9.05L32.5 8h2.95l-2.1 8.5H41l-.75 3H32.6l-2.25 9H39l-.75 3H29.6L27.5 40h-3l2.15-8.5H17.6L15.5 40Zm5.85-11.5h9.05l2.25-9H20.6Z"/></symbol></svg>",
  ],
]
`;

exports[`examples > "react" example should generate files 1`] = `
[
  "assets",
  "assets/common",
  "assets/common/close.svg",
  "assets/common/favourite.svg",
  "assets/format",
  "assets/format/align-left.svg",
  "assets/format/tag.svg",
  "example.tsx",
  "generated",
  "generated/common.svg",
  "generated/format.svg",
  "generated/sprite-info.ts",
  "icon.tsx",
]
`;

exports[`examples > "react" example should replay same output 1`] = `
[
  [
    "create",
    "generated/sprite-info.ts",
    "
/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(
  all: [...Sprites]
) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(\`Symbol "\${symbolName}" is not found in "\${spriteName}"\`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? \`/\${baseUrl?.replace(/(^\\/)|(\\/$)/g, '')}/\${fileName}\`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return \`#\${symbol.id}\`;
        case 'external':
          return \`\${getUrl(asset.meta.fileName, config?.baseUrl)}#\${symbol.id}\`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <
  const Symbols extends readonly [...SvgSpriteSymbol[]]
>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = \`0 0 \${width} \${height}\`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([defineSprite(
  'common',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["close"],
     [48]
   ), defineSpriteSymbol(
     ["favourite"],
     [48]
   )],
  defineExternalAssetMeta('common.svg')
)]
), defineSprite(
  'format',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["align-left"],
     [48]
   ), defineSpriteSymbol(
     ["tag"],
     [48]
   )],
  defineExternalAssetMeta('format.svg')
)]
)])

export type SpritesMeta = {
  "common": "close" | "favourite";
  "format": "align-left" | "tag";
}

//#endregion
",
  ],
  [
    "create",
    "common.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="close"><path d="m12.45 37.65-2.1-2.1L21.9 24 10.35 12.45l2.1-2.1L24 21.9l11.55-11.55 2.1 2.1L26.1 24l11.55 11.55-2.1 2.1L24 26.1Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="favourite"><path d="m24 41.95-2.05-1.85q-5.3-4.85-8.75-8.375t-5.5-6.3T4.825 20.4 4 15.85q0-4.5 3.025-7.525T14.5 5.3q2.85 0 5.275 1.35T24 10.55q2.1-2.7 4.45-3.975T33.5 5.3q4.45 0 7.475 3.025T44 15.85q0 2.3-.825 4.55T40.3 25.425t-5.5 6.3-8.75 8.375ZM24 38q5.05-4.65 8.325-7.975t5.2-5.825 2.7-4.45.775-3.9q0-3.3-2.1-5.425T33.5 8.3q-2.55 0-4.75 1.575T25.2 14.3h-2.45q-1.3-2.8-3.5-4.4T14.5 8.3q-3.3 0-5.4 2.125T7 15.85q0 1.95.775 3.925t2.7 4.5T15.7 30.1 24 38m0-14.85"/></symbol></svg>",
  ],
  [
    "create",
    "format.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="align-left"><path d="M6 42v-3h36v3Zm0-8.25v-3h23.6v3Zm0-8.25v-3h36v3Zm0-8.25v-3h23.6v3ZM6 9V6h36v3Z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="tag"><path d="m12.5 40 2.15-8.5H7l.75-3h7.65l2.25-9H9l.75-3h8.65L20.5 8h2.95l-2.1 8.5h9.05L32.5 8h2.95l-2.1 8.5H41l-.75 3H32.6l-2.25 9H39l-.75 3H29.6L27.5 40h-3l2.15-8.5H17.6L15.5 40Zm5.85-11.5h9.05l2.25-9H20.6Z"/></symbol></svg>",
  ],
]
`;

exports[`examples > "simple" example should generate files 1`] = `
[
  "assets",
  "assets/arrow-drop-down.svg",
  "assets/arrow-drop-up.svg",
  "generated",
  "generated/sprite-info.ts",
  "generated/sprite.svg",
]
`;

exports[`examples > "simple" example should replay same output 1`] = `
[
  [
    "create",
    "generated/sprite-info.ts",
    "
/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(
  all: [...Sprites]
) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(\`Symbol "\${symbolName}" is not found in "\${spriteName}"\`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? \`/\${baseUrl?.replace(/(^\\/)|(\\/$)/g, '')}/\${fileName}\`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return \`#\${symbol.id}\`;
        case 'external':
          return \`\${getUrl(asset.meta.fileName, config?.baseUrl)}#\${symbol.id}\`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <
  const Symbols extends readonly [...SvgSpriteSymbol[]]
>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = \`0 0 \${width} \${height}\`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([defineSprite(
  'sprite',
  [defineSpriteAsset(
  [defineSpriteSymbol(
     ["arrow-drop-down"],
     [24]
   ), defineSpriteSymbol(
     ["arrow-drop-up"],
     [24]
   )],
  defineExternalAssetMeta('sprite.svg')
)]
)])

export type SpritesMeta = {
  "sprite": "arrow-drop-down" | "arrow-drop-up";
}

//#endregion
",
  ],
  [
    "create",
    "sprite.svg",
    "<svg width="0" height="0"><symbol xmlns="http://www.w3.org/2000/svg" id="arrow-drop-down" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"/><path d="m7 10 5 5 5-5z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="arrow-drop-up" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"/><path d="m7 14 5-5 5 5z"/></symbol></svg>",
  ],
]
`;
