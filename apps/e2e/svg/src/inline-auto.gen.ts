/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(all: [...Sprites]) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(`Symbol "${symbolName}" is not found in "${spriteName}"`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? `/${baseUrl?.replace(/(^\/)|(\/$)/g, '')}/${fileName}`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return `#${symbol.id}`;
        case 'external':
          return `${getUrl(asset.meta.fileName, config?.baseUrl)}#${symbol.id}`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <const Symbols extends readonly [...SvgSpriteSymbol[]]>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = `0 0 ${width} ${height}`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([
  defineSprite('inline-auto', [
    defineSpriteAsset(
      [
        defineSpriteSymbol(['add'], [16]),
        defineSpriteSymbol(['checkmark'], [16]),
        defineSpriteSymbol(['close'], [16]),
        defineSpriteSymbol(['favourite'], [48]),
        defineSpriteSymbol(['folder-colored'], [16]),
        defineSpriteSymbol(['hex-a-fill'], [16]),
        defineSpriteSymbol(['simple-hex-upper'], [16])
      ],
      defineExternalAssetMeta('inline-auto.svg')
    ),
    defineSpriteAsset(
      [
        defineSpriteSymbol(['animated-mask', 'inline-auto-animated-mask-5f551070'], [200]),
        defineSpriteSymbol(['animated-pattern', 'inline-auto-animated-pattern-cc20ebf7'], [200]),
        defineSpriteSymbol(['animated-symbol', 'inline-auto-animated-symbol-54cc15ca'], [200]),
        defineSpriteSymbol(['combined-filter', 'inline-auto-combined-filter-0c0e9338'], [200]),
        defineSpriteSymbol(['dynamic-filter', 'inline-auto-dynamic-filter-c60a732e'], [200]),
        defineSpriteSymbol(['flag-ad', 'inline-auto-flag-ad-fc4f87b1'], [512]),
        defineSpriteSymbol(['flag-uk', 'inline-auto-flag-uk-c3391966'], [512]),
        defineSpriteSymbol(['linear-gradient', 'inline-auto-linear-gradient-0540f7a7'], [100]),
        defineSpriteSymbol(
          ['mixed-animation-pattern', 'inline-auto-mixed-animation-pattern-141ec3ea'],
          [200]
        ),
        defineSpriteSymbol(['mixed-gradient', 'inline-auto-mixed-gradient-836b6a20'], [200])
      ],
      defineInjectedAssetMeta(
        '<svg width="0" height="0"><defs><linearGradient id="inline-auto-animated-mask-ref-a-5f551070" x1="0%" x2="100%" y1="0%" y2="0%"><stop offset="0%" stop-color="red"/><stop offset="100%" stop-color="#ff0"/></linearGradient><linearGradient id="inline-auto-animated-mask-ref-b-5f551070" x1="0%" x2="100%" y1="0%" y2="100%"><stop offset="0%" stop-color="#00f"><animate attributeName="stop-color" dur="3s" repeatCount="indefinite" values="blue;purple;blue"/></stop><stop offset="100%" stop-color="green"><animate attributeName="stop-color" dur="3s" repeatCount="indefinite" values="green;yellow;green"/></stop></linearGradient><linearGradient id="inline-auto-linear-gradient-ref-a-0540f7a7" x1="0%" x2="100%" y1="0%" y2="100%"><stop offset="0%" style="stop-color:#ff0;stop-opacity:1"/><stop offset="100%" style="stop-color:red;stop-opacity:1"/></linearGradient><linearGradient id="inline-auto-mixed-gradient-ref-a-836b6a20" x1="0" x2="200" y1="0" y2="200" gradientUnits="userSpaceOnUse"><stop offset="0" style="stop-color:#fff"/><stop offset="1" style="stop-color:#00f"/></linearGradient><linearGradient id="inline-auto-mixed-gradient-ref-b-836b6a20" x1="200" x2="0" y1="0" y2="200" gradientUnits="userSpaceOnUse"><stop offset="0" style="stop-color:#fff"/><stop offset="1" style="stop-color:#00f"/></linearGradient><mask id="inline-auto-animated-mask-ref-c-5f551070"><path fill="url(#inline-auto-animated-mask-ref-a-5f551070)" d="M0 0h200v200H0z"/></mask><mask id="inline-auto-flag-ad-ref-a-fc4f87b1"><circle cx="256" cy="256" r="256" fill="#fff"/></mask><mask id="inline-auto-flag-uk-ref-a-c3391966"><circle cx="256" cy="256" r="256" fill="#fff"/></mask><pattern id="inline-auto-animated-pattern-ref-a-cc20ebf7" width="40" height="40" patternUnits="userSpaceOnUse"><path fill="#ff0" d="M0 0h40v40H0z"/><circle cx="20" cy="20" r="10" fill="orange"><animate attributeName="r" dur="1s" from="10" repeatCount="indefinite" to="15"/></circle></pattern><pattern id="inline-auto-mixed-animation-pattern-ref-a-141ec3ea" width="40" height="40" patternUnits="userSpaceOnUse"><circle cx="20" cy="20" r="10" fill="currentColor"/><circle cx="20" cy="20" r="5" fill="currentColor"><animate attributeName="cx" dur="2s" from="10" repeatCount="indefinite" to="30"/><animate attributeName="cy" dur="2s" from="10" repeatCount="indefinite" to="30"/></circle></pattern><filter id="inline-auto-combined-filter-ref-a-0c0e9338" width="200%" height="200%" x="0" y="0"><feGaussianBlur in="SourceGraphic" result="blur" stdDeviation="4"/><feColorMatrix in="blur" result="matrixOut" values="0 0 0 0 0 0 0 0 0.5 0 0 0 0 0.5 0 0 0 0 1 0"/><feMerge><feMergeNode in="matrixOut"/><feMergeNode in="SourceGraphic"/></feMerge></filter><filter id="inline-auto-dynamic-filter-ref-a-c60a732e"><feTurbulence baseFrequency=".02" numOctaves="3" result="noise" type="fractalNoise"/><feDisplacementMap in="SourceGraphic" in2="noise" scale="43"/><animate attributeName="baseFrequency" dur="10s" repeatCount="indefinite" values="0.05;0.1;0.05"/></filter><symbol id="inline-auto-animated-symbol-ref-a-54cc15ca" viewBox="0 0 24 24"><path fill="currentColor" d="m12 2 3 6 7 1-5 5 1 7-6-3-6 3 1-7-5-5 7-1z"/></symbol></defs><symbol xmlns="http://www.w3.org/2000/svg" id="inline-auto-animated-mask-5f551070"><path fill="url(#inline-auto-animated-mask-ref-b-5f551070)" d="M0 0h200v200H0z" mask="url(#inline-auto-animated-mask-ref-c-5f551070)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="inline-auto-animated-pattern-cc20ebf7"><path fill="url(#inline-auto-animated-pattern-ref-a-cc20ebf7)" d="M0 0h200v200H0z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="inline-auto-animated-symbol-54cc15ca"><use x="20" y="20" href="#inline-auto-animated-symbol-ref-a-54cc15ca"><animateTransform attributeName="transform" dur="10s" from="0 12 12" repeatCount="indefinite" to="360 12 12" type="rotate"/></use><use x="80" y="20" href="#inline-auto-animated-symbol-ref-a-54cc15ca" transform="scale(.5)"/><use x="140" y="20" href="#inline-auto-animated-symbol-ref-a-54cc15ca" transform="scale(.75)"/><use x="20" y="80" href="#inline-auto-animated-symbol-ref-a-54cc15ca" transform="scale(.25)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="inline-auto-combined-filter-0c0e9338"><circle cx="100" cy="100" r="60" fill="currentColor" filter="url(#inline-auto-combined-filter-ref-a-0c0e9338)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="inline-auto-dynamic-filter-c60a732e"><circle cx="100" cy="100" r="80" fill="currentColor" filter="url(#inline-auto-dynamic-filter-ref-a-c60a732e)"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="inline-auto-flag-ad-fc4f87b1" viewBox="0 0 512 512"><g mask="url(#inline-auto-flag-ad-ref-a-fc4f87b1)"><path fill="#0052b4" d="M0 0h144.7l36 254.6-36 257.4H0z"/><path fill="#d80027" d="M367.3 0H512v512H367.3l-29.7-257.3z"/><path fill="#ffda44" d="M144.7 0h222.6v512H144.7z"/><path fill="#d80027" d="M256 354.5V256h66.8v47.3zm-66.8-165.3H256V256h-66.8z"/><path fill="#ff9811" d="M289.4 167a22.3 22.3 0 0 0-33.4-19.3 22.1 22.1 0 0 0-11.1-3c-12.3 0-22.3 10-22.3 22.3H167v111.3c0 41.4 32.9 65.4 58.7 77.8a22.1 22.1 0 0 0-3 11.2 22.3 22.3 0 0 0 33.3 19.3 22.1 22.1 0 0 0 11.1 3 22.3 22.3 0 0 0 19.2-33.5c25.8-12.4 58.7-36.4 58.7-77.8V167zm22.3 111.3c0 5.8 0 23.4-27.5 40.9a136.5 136.5 0 0 1-28.2 13.3c-7-2.4-17.8-6.7-28.2-13.3-27.5-17.5-27.5-35.1-27.5-41v-77.9h111.4z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="inline-auto-flag-uk-c3391966" viewBox="0 0 512 512"><g mask="url(#inline-auto-flag-uk-ref-a-c3391966)"><path fill="#eee" d="m0 0 8 22-8 23v23l32 54-32 54v32l32 48-32 48v32l32 54-32 54v68l22-8 23 8h23l54-32 54 32h32l48-32 48 32h32l54-32 54 32h68l-8-22 8-23v-23l-32-54 32-54v-32l-32-48 32-48v-32l-32-54 32-54V0l-22 8-23-8h-23l-54 32-54-32h-32l-48 32-48-32h-32l-54 32L68 0z"/><path fill="#0052b4" d="M336 0v108L444 0Zm176 68L404 176h108zM0 176h108L0 68ZM68 0l108 108V0Zm108 512V404L68 512ZM0 444l108-108H0Zm512-108H404l108 108Zm-68 176L336 404v108z"/><path fill="#d80027" d="M0 0v45l131 131h45zm208 0v208H0v96h208v208h96V304h208v-96H304V0zm259 0L336 131v45L512 0zM176 336 0 512h45l131-131zm160 0 176 176v-45L381 336z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="inline-auto-linear-gradient-0540f7a7" viewBox="0 0 100 100"><ellipse cx="50" cy="50" fill="url(#inline-auto-linear-gradient-ref-a-0540f7a7)" rx="50" ry="25"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="inline-auto-mixed-animation-pattern-141ec3ea"><path fill="url(#inline-auto-mixed-animation-pattern-ref-a-141ec3ea)" d="M0 0h200v200H0z"/></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="inline-auto-mixed-gradient-836b6a20"><circle cx="100" cy="100" r="100" fill="url(#inline-auto-mixed-gradient-ref-a-836b6a20)"/><circle cx="100" cy="100" r="50" fill="url(#inline-auto-mixed-gradient-ref-b-836b6a20)"/></symbol></svg>'
      )
    )
  ])
]);

export type SpritesMeta = {
  'inline-auto':
    | 'add'
    | 'checkmark'
    | 'close'
    | 'favourite'
    | 'folder-colored'
    | 'hex-a-fill'
    | 'simple-hex-upper'
    | 'animated-mask'
    | 'animated-pattern'
    | 'animated-symbol'
    | 'combined-filter'
    | 'dynamic-filter'
    | 'flag-ad'
    | 'flag-uk'
    | 'linear-gradient'
    | 'mixed-animation-pattern'
    | 'mixed-gradient';
};

//#endregion
