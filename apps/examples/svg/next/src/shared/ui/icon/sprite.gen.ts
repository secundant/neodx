/// <reference lib="dom" />
/* eslint-disable */
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
export async function loadSvgSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSvgSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
export function mountSvgSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
export function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(all: [...Sprites]) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(`Symbol "${symbolName}" is not found in "${spriteName}"`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

export interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSvgSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSvgSprite?: typeof loadSvgSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSvgSprite?: typeof mountSvgSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? `/${baseUrl?.replace(/(^\/)|(\/$)/g, '')}/${fileName}`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSvgSprite: load = loadSvgSprite,
      mountSvgSprite: mount = mountSvgSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return `#${symbol.id}`;
        case 'external':
          return `${getUrl(asset.meta.fileName, config?.baseUrl)}#${symbol.id}`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <const Symbols extends readonly [...SvgSpriteSymbol[]]>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

export type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

/** Common structure for interaction with all named data. */
const defineNamedMap = <
  const Items extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Items]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Items]: Items[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [Item in Items[number] as Item['name']]: Item;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  [name, id = name]: [Name] | [Name, string],
  [width, height = width, viewBox = `0 0 ${width} ${height}`]: [number, number?, string?]
) => ({
  id,
  name,
  width,
  height,
  viewBox
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

export type SvgSpriteSymbol<Name extends string = any> = ReturnType<
  typeof defineSpriteSymbol<Name>
>;
export type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

export type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([
  defineSprite('general', [
    defineSpriteAsset(
      [
        defineSpriteSymbol(['autoscroll-from-source'], [16]),
        defineSpriteSymbol(['autoscroll-to-source'], [16]),
        defineSpriteSymbol(['checkmark'], [16]),
        defineSpriteSymbol(['chevron-down-large'], [16]),
        defineSpriteSymbol(['chevron-down'], [16]),
        defineSpriteSymbol(['chevron-left'], [16]),
        defineSpriteSymbol(['chevron-right'], [16]),
        defineSpriteSymbol(['chevron-up-large'], [16]),
        defineSpriteSymbol(['chevron-up'], [16]),
        defineSpriteSymbol(['close-small-hovered'], [16]),
        defineSpriteSymbol(['close-small'], [16]),
        defineSpriteSymbol(['close'], [16]),
        defineSpriteSymbol(['collapse-all'], [16]),
        defineSpriteSymbol(['copy'], [16]),
        defineSpriteSymbol(['cut'], [16]),
        defineSpriteSymbol(['delete'], [16]),
        defineSpriteSymbol(['down'], [16]),
        defineSpriteSymbol(['download'], [16]),
        defineSpriteSymbol(['edit'], [16]),
        defineSpriteSymbol(['exit'], [16]),
        defineSpriteSymbol(['expand-all'], [16]),
        defineSpriteSymbol(['export'], [16]),
        defineSpriteSymbol(['external-link'], [16]),
        defineSpriteSymbol(['filter'], [16]),
        defineSpriteSymbol(['groups'], [16]),
        defineSpriteSymbol(['help'], [16]),
        defineSpriteSymbol(['hide'], [16]),
        defineSpriteSymbol(['history'], [16]),
        defineSpriteSymbol(['import'], [16]),
        defineSpriteSymbol(['layout'], [16]),
        defineSpriteSymbol(['left'], [16]),
        defineSpriteSymbol(['list-files'], [16]),
        defineSpriteSymbol(['locate'], [16]),
        defineSpriteSymbol(['locked'], [16]),
        defineSpriteSymbol(['more-horizontal'], [16]),
        defineSpriteSymbol(['more-vertical'], [16]),
        defineSpriteSymbol(['move-down'], [16]),
        defineSpriteSymbol(['move-up'], [16]),
        defineSpriteSymbol(['open-in-tool-window'], [16]),
        defineSpriteSymbol(['open-new-tab'], [16]),
        defineSpriteSymbol(['open'], [16]),
        defineSpriteSymbol(['pagination'], [16]),
        defineSpriteSymbol(['paste'], [16]),
        defineSpriteSymbol(['pin'], [16]),
        defineSpriteSymbol(['preview-horizontally'], [16]),
        defineSpriteSymbol(['preview-vertically'], [16]),
        defineSpriteSymbol(['print'], [16]),
        defineSpriteSymbol(['project-structure'], [16]),
        defineSpriteSymbol(['project-wide-analysis-off'], [16]),
        defineSpriteSymbol(['project-wide-analysis-on'], [16]),
        defineSpriteSymbol(['redo'], [16]),
        defineSpriteSymbol(['refresh'], [16]),
        defineSpriteSymbol(['remove'], [16]),
        defineSpriteSymbol(['right'], [16]),
        defineSpriteSymbol(['run-anything'], [16]),
        defineSpriteSymbol(['save'], [16]),
        defineSpriteSymbol(['scroll-down'], [16]),
        defineSpriteSymbol(['search'], [16]),
        defineSpriteSymbol(['settings'], [16]),
        defineSpriteSymbol(['show-as-tree'], [16]),
        defineSpriteSymbol(['show'], [16]),
        defineSpriteSymbol(['soft-wrap'], [16]),
        defineSpriteSymbol(['sort-alphabetically'], [16]),
        defineSpriteSymbol(['sort-by-duration'], [16]),
        defineSpriteSymbol(['sort-by-type'], [16]),
        defineSpriteSymbol(['sort-by-usage'], [16]),
        defineSpriteSymbol(['sort-by-visibility'], [16]),
        defineSpriteSymbol(['sort-by'], [16]),
        defineSpriteSymbol(['split-horizontally'], [16]),
        defineSpriteSymbol(['split-vertically'], [16]),
        defineSpriteSymbol(['undo'], [16]),
        defineSpriteSymbol(['unlocked'], [16]),
        defineSpriteSymbol(['up'], [16]),
        defineSpriteSymbol(['upload'], [16]),
        defineSpriteSymbol(['vcs'], [16])
      ],
      defineExternalAssetMeta('general.7fbf930d.svg')
    ),
    defineSpriteAsset(
      [
        defineSpriteSymbol(['ide-update', 'general-ide-update-86493ec5'], [16]),
        defineSpriteSymbol(['plugin-update', 'general-plugin-update-530f2307'], [16])
      ],
      defineInjectedAssetMeta(
        '<svg width="0" height="0"><defs><clipPath id="general-ide-update-ref-a-86493ec5"><path fill="var(--icon-secondary-color)" d="M0 0h16v16H0z"/></clipPath><clipPath id="general-plugin-update-ref-a-530f2307"><path fill="var(--icon-secondary-color)" d="M16 0H0v16h16z"/></clipPath></defs><symbol xmlns="http://www.w3.org/2000/svg" id="general-ide-update-86493ec5" fill="none" viewBox="0 0 16 16"><g fill="var(--icon-secondary-color)" clip-path="url(#general-ide-update-ref-a-86493ec5)"><path d="m8.5 5.207 2.646 2.647a.5.5 0 0 0 .708-.708l-3.5-3.5a.5.5 0 0 0-.708 0l-3.5 3.5a.5.5 0 1 0 .708.708L7.5 5.207V12a.5.5 0 0 0 1 0z"/><path fill-rule="evenodd" d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m0-1A7 7 0 1 0 8 1a7 7 0 0 0 0 14" clip-rule="evenodd"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="general-plugin-update-530f2307" fill="none" viewBox="0 0 16 16"><g fill="var(--icon-secondary-color)" clip-path="url(#general-plugin-update-ref-a-530f2307)"><path d="m8.5 5.207 2.646 2.647a.5.5 0 0 0 .708-.708l-3.5-3.5a.5.5 0 0 0-.708 0l-3.5 3.5a.5.5 0 1 0 .708.708L7.5 5.207V12a.5.5 0 0 0 1 0z"/><path fill-rule="evenodd" d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m0-1A7 7 0 1 0 8 1a7 7 0 0 0 0 14" clip-rule="evenodd"/></g></symbol></svg>'
      )
    )
  ]),
  defineSprite('other', [
    defineSpriteAsset(
      [defineSpriteSymbol(['linkedin'], [140, 34]), defineSpriteSymbol(['twitter'], [248, 204])],
      defineExternalAssetMeta('other.35c4e813.svg')
    ),
    defineSpriteAsset(
      [
        defineSpriteSymbol(['de', 'other-de-3f6dc3fa'], [512]),
        defineSpriteSymbol(['es', 'other-es-3a001c14'], [512]),
        defineSpriteSymbol(['fr', 'other-fr-1d0c12a2'], [512]),
        defineSpriteSymbol(['it', 'other-it-8f3ce995'], [512]),
        defineSpriteSymbol(['ru', 'other-ru-cd36b52b'], [512]),
        defineSpriteSymbol(['uk', 'other-uk-88169c65'], [512]),
        defineSpriteSymbol(['us', 'other-us-7f3012f5'], [512])
      ],
      defineInjectedAssetMeta(
        '<svg width="0" height="0"><defs><mask id="other-de-ref-a-3f6dc3fa"><circle cx="256" cy="256" r="256" fill="#fff"/></mask><mask id="other-es-ref-a-3a001c14"><circle cx="256" cy="256" r="256" fill="#fff"/></mask><mask id="other-fr-ref-a-1d0c12a2"><circle cx="256" cy="256" r="256" fill="#fff"/></mask><mask id="other-it-ref-a-8f3ce995"><circle cx="256" cy="256" r="256" fill="#fff"/></mask><mask id="other-ru-ref-a-cd36b52b"><circle cx="256" cy="256" r="256" fill="#fff"/></mask><mask id="other-uk-ref-a-88169c65"><circle cx="256" cy="256" r="256" fill="#fff"/></mask><mask id="other-us-ref-a-7f3012f5"><circle cx="256" cy="256" r="256" fill="#fff"/></mask></defs><symbol xmlns="http://www.w3.org/2000/svg" id="other-de-3f6dc3fa" viewBox="0 0 512 512"><g mask="url(#other-de-ref-a-3f6dc3fa)"><path fill="#ffda44" d="m0 345 256.7-25.5L512 345v167H0z"/><path fill="#d80027" d="m0 167 255-23 257 23v178H0z"/><path fill="#333" d="M0 0h512v167H0z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="other-es-3a001c14" viewBox="0 0 512 512"><g mask="url(#other-es-ref-a-3a001c14)"><path fill="#ffda44" d="m0 128 256-32 256 32v256l-256 32L0 384Z"/><path fill="#d80027" d="M0 0h512v128H0zm0 384h512v128H0z"/><path fill="#ff9811" d="M160 272v24c0 8 4 14 9 19l5-6 5 10a21 21 0 0 0 10 0l5-10 5 6c6-5 9-11 9-19v-24h-9l-5 8-5-8h-10l-5 8-5-8z"/><path d="M122 252h172m-172 24h28m116 0h28"/><path fill="#d80027" d="M122 248a4 4 0 0 0-4 4 4 4 0 0 0 4 4h172a4 4 0 0 0 4-4 4 4 0 0 0-4-4zm0 24a4 4 0 0 0-4 4 4 4 0 0 0 4 4h28a4 4 0 0 0 4-4 4 4 0 0 0-4-4zm144 0a4 4 0 0 0-4 4 4 4 0 0 0 4 4h28a4 4 0 0 0 4-4 4 4 0 0 0-4-4z"/><path fill="#eee" d="M196 168c-7 0-13 5-15 11l-5-1c-9 0-16 7-16 16s7 16 16 16c7 0 13-4 15-11a16 16 0 0 0 17-4 16 16 0 0 0 17 4 16 16 0 1 0 10-20 16 16 0 0 0-27-5q-4.5-6-12-6m0 8c5 0 8 4 8 8 0 5-3 8-8 8-4 0-8-3-8-8 0-4 4-8 8-8m24 0c5 0 8 4 8 8 0 5-3 8-8 8-4 0-8-3-8-8 0-4 4-8 8-8m-44 10 4 1 4 8c0 4-4 7-8 7s-8-3-8-8c0-4 4-8 8-8m64 0c5 0 8 4 8 8 0 5-3 8-8 8-4 0-8-3-8-7l4-8z"/><path fill="none" d="M220 284v12c0 7 5 12 12 12s12-5 12-12v-12z"/><path fill="#ff9811" d="M200 160h16v32h-16z"/><path fill="#eee" d="M208 224h48v48h-48z"/><path fill="#d80027" d="m248 208-8 8h-64l-8-8c0-13 18-24 40-24s40 11 40 24m-88 16h48v48h-48z"/><path fill="#ff9811" d="M168 232v8h8v16h-8v8h32v-8h-8v-16h8v-8zm8-16h64v8h-64z"/><path fill="#d80027" d="M169 272v43a24 24 0 0 0 10 4v-47zm20 0v47a24 24 0 0 0 10-4v-43z"/><g fill="#eee"><path d="M144 304h-16v-80h16zm128 0h16v-80h-16z"/><ellipse cx="208" cy="296" rx="48" ry="32"/></g><g fill="#d80027"><rect width="16" height="24" x="128" y="192" rx="8"/><rect width="16" height="24" x="272" y="192" rx="8"/><path d="M208 272v24a24 24 0 0 0 24 24 24 24 0 0 0 24-24v-24h-24z"/></g><g fill="#ffda44"><circle cx="186" cy="202" r="6"/><circle cx="208" cy="202" r="6"/><circle cx="230" cy="202" r="6"/></g><g fill="#338af3"><circle cx="208" cy="272" r="16"/><rect width="32" height="16" x="264" y="320" ry="8"/><rect width="32" height="16" x="120" y="320" ry="8"/></g><rect width="32" height="16" x="120" y="208" fill="#ff9811" ry="8"/><rect width="32" height="16" x="264" y="208" fill="#ff9811" ry="8"/><rect width="32" height="16" x="120" y="304" fill="#ff9811" rx="8"/><rect width="32" height="16" x="264" y="304" fill="#ff9811" rx="8"/><rect width="20" height="32" x="222" y="232" fill="#d80027" rx="10" ry="10"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="other-fr-1d0c12a2" viewBox="0 0 512 512"><g mask="url(#other-fr-ref-a-1d0c12a2)"><path fill="#eee" d="M167 0h178l25.9 252.3L345 512H167l-29.8-253.4z"/><path fill="#0052b4" d="M0 0h167v512H0z"/><path fill="#d80027" d="M345 0h167v512H345z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="other-it-8f3ce995" viewBox="0 0 512 512"><g mask="url(#other-it-ref-a-8f3ce995)"><path fill="#eee" d="M167 0h178l25.9 252.3L345 512H167l-29.8-253.4z"/><path fill="#6da544" d="M0 0h167v512H0z"/><path fill="#d80027" d="M345 0h167v512H345z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="other-ru-cd36b52b" viewBox="0 0 512 512"><g mask="url(#other-ru-ref-a-cd36b52b)"><path fill="#0052b4" d="M512 170v172l-256 32L0 342V170l256-32z"/><path fill="#eee" d="M512 0v170H0V0Z"/><path fill="#d80027" d="M512 342v170H0V342Z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="other-uk-88169c65" viewBox="0 0 512 512"><g mask="url(#other-uk-ref-a-88169c65)"><path fill="#eee" d="m0 0 8 22-8 23v23l32 54-32 54v32l32 48-32 48v32l32 54-32 54v68l22-8 23 8h23l54-32 54 32h32l48-32 48 32h32l54-32 54 32h68l-8-22 8-23v-23l-32-54 32-54v-32l-32-48 32-48v-32l-32-54 32-54V0l-22 8-23-8h-23l-54 32-54-32h-32l-48 32-48-32h-32l-54 32L68 0z"/><path fill="#0052b4" d="M336 0v108L444 0Zm176 68L404 176h108zM0 176h108L0 68ZM68 0l108 108V0Zm108 512V404L68 512ZM0 444l108-108H0Zm512-108H404l108 108Zm-68 176L336 404v108z"/><path fill="#d80027" d="M0 0v45l131 131h45zm208 0v208H0v96h208v208h96V304h208v-96H304V0zm259 0L336 131v45L512 0zM176 336 0 512h45l131-131zm160 0 176 176v-45L381 336z"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="other-us-7f3012f5" viewBox="0 0 512 512"><g mask="url(#other-us-ref-a-7f3012f5)"><path fill="#eee" d="M256 0h256v64l-32 32 32 32v64l-32 32 32 32v64l-32 32 32 32v64l-256 32L0 448v-64l32-32-32-32v-64z"/><path fill="#d80027" d="M224 64h288v64H224Zm0 128h288v64H256ZM0 320h512v64H0Zm0 128h512v64H0Z"/><path fill="#0052b4" d="M0 0h256v256H0Z"/><path fill="#eee" d="m187 243 57-41h-70l57 41-22-67zm-81 0 57-41H93l57 41-22-67zm-81 0 57-41H12l57 41-22-67zm162-81 57-41h-70l57 41-22-67zm-81 0 57-41H93l57 41-22-67zm-81 0 57-41H12l57 41-22-67Zm162-82 57-41h-70l57 41-22-67Zm-81 0 57-41H93l57 41-22-67zm-81 0 57-41H12l57 41-22-67Z"/></g></symbol></svg>'
      )
    )
  ]),
  defineSprite('tool-windows', [
    defineSpriteAsset(
      [
        defineSpriteSymbol(['ant'], [16]),
        defineSpriteSymbol(['aws-glue'], [13]),
        defineSpriteSymbol(['bookmarks'], [16]),
        defineSpriteSymbol(['build-server-protocol'], [16]),
        defineSpriteSymbol(['build'], [16]),
        defineSpriteSymbol(['c-make-tool-window'], [16]),
        defineSpriteSymbol(['changes'], [16]),
        defineSpriteSymbol(['commit'], [16]),
        defineSpriteSymbol(['concurrency-diagram-toolwindow'], [16]),
        defineSpriteSymbol(['coverage'], [16]),
        defineSpriteSymbol(['cwm-access'], [16]),
        defineSpriteSymbol(['cwm-users'], [16]),
        defineSpriteSymbol(['database-changes'], [16]),
        defineSpriteSymbol(['dataproc-tool-window'], [16]),
        defineSpriteSymbol(['dbms'], [16]),
        defineSpriteSymbol(['debug'], [16]),
        defineSpriteSymbol(['dependencies'], [16]),
        defineSpriteSymbol(['documentation'], [16]),
        defineSpriteSymbol(['donate'], [16]),
        defineSpriteSymbol(['endpoints'], [16]),
        defineSpriteSymbol(['exception-analyzer'], [16]),
        defineSpriteSymbol(['find-external-usages'], [16]),
        defineSpriteSymbol(['find'], [16]),
        defineSpriteSymbol(['gitlab'], [16]),
        defineSpriteSymbol(['gradle'], [16]),
        defineSpriteSymbol(['hierarchy'], [16]),
        defineSpriteSymbol(['hive'], [16]),
        defineSpriteSymbol(['jupyter-tool-window'], [16]),
        defineSpriteSymbol(['kafka'], [15]),
        defineSpriteSymbol(['kotlin-tool-window'], [16]),
        defineSpriteSymbol(['learn'], [16]),
        defineSpriteSymbol(['makefile-tool-window'], [16]),
        defineSpriteSymbol(['maven'], [16]),
        defineSpriteSymbol(['messages'], [16]),
        defineSpriteSymbol(['notifications'], [16]),
        defineSpriteSymbol(['npm'], [16]),
        defineSpriteSymbol(['package-manager'], [16]),
        defineSpriteSymbol(['problems'], [16]),
        defineSpriteSymbol(['profiler'], [16]),
        defineSpriteSymbol(['project'], [16]),
        defineSpriteSymbol(['pull-requests'], [16]),
        defineSpriteSymbol(['python-console-tool-window'], [16]),
        defineSpriteSymbol(['repositories'], [16]),
        defineSpriteSymbol(['run'], [16]),
        defineSpriteSymbol(['rust'], [16]),
        defineSpriteSymbol(['sbt-icon'], [16]),
        defineSpriteSymbol(['sbt-shell'], [16]),
        defineSpriteSymbol(['sci-view'], [16]),
        defineSpriteSymbol(['services'], [16]),
        defineSpriteSymbol(['setting-sync'], [16]),
        defineSpriteSymbol(['space-tool-window'], [16]),
        defineSpriteSymbol(['spring'], [16]),
        defineSpriteSymbol(['structure'], [16]),
        defineSpriteSymbol(['task'], [16]),
        defineSpriteSymbol(['terminal'], [16]),
        defineSpriteSymbol(['todo'], [16]),
        defineSpriteSymbol(['transfer'], [16]),
        defineSpriteSymbol(['unknown'], [16]),
        defineSpriteSymbol(['vcs'], [16]),
        defineSpriteSymbol(['web-locator'], [16]),
        defineSpriteSymbol(['web-server'], [16]),
        defineSpriteSymbol(['web'], [16]),
        defineSpriteSymbol(['writerside-preview'], [16]),
        defineSpriteSymbol(['writerside'], [16])
      ],
      defineExternalAssetMeta('tool-windows.94c5ce95.svg')
    ),
    defineSpriteAsset(
      [defineSpriteSymbol(['new-u-i', 'tool-windows-new-u-i-65e30001'], [16])],
      defineInjectedAssetMeta(
        '<svg width="0" height="0"><defs><clipPath id="tool-windows-new-u-i-ref-a-65e30001"><path fill="var(--icon-secondary-color)" d="M0 0h16v16H0z"/></clipPath></defs><symbol xmlns="http://www.w3.org/2000/svg" id="tool-windows-new-u-i-65e30001" fill="none" viewBox="0 0 16 16"><g clip-path="url(#tool-windows-new-u-i-ref-a-65e30001)"><path stroke="currentColor" d="M5.346 6.358C6.328 5.383 7.007 4.14 7.5 2.57c.493 1.571 1.172 2.813 2.155 3.788.981.974 2.234 1.65 3.824 2.142-1.59.492-2.843 1.168-3.824 2.142-.983.975-1.662 2.216-2.155 3.788-.493-1.572-1.172-2.813-2.154-3.788S3.112 8.992 1.522 8.5c1.59-.492 2.842-1.168 3.824-2.142Z"/><path fill="currentColor" d="M12.993 4.907a1.905 1.905 0 1 0 0-3.81 1.905 1.905 0 0 0 0 3.81"/></g></symbol></svg>'
      )
    )
  ])
]);

export type SpritesMeta = {
  general:
    | 'autoscroll-from-source'
    | 'autoscroll-to-source'
    | 'checkmark'
    | 'chevron-down-large'
    | 'chevron-down'
    | 'chevron-left'
    | 'chevron-right'
    | 'chevron-up-large'
    | 'chevron-up'
    | 'close-small-hovered'
    | 'close-small'
    | 'close'
    | 'collapse-all'
    | 'copy'
    | 'cut'
    | 'delete'
    | 'down'
    | 'download'
    | 'edit'
    | 'exit'
    | 'expand-all'
    | 'export'
    | 'external-link'
    | 'filter'
    | 'groups'
    | 'help'
    | 'hide'
    | 'history'
    | 'import'
    | 'layout'
    | 'left'
    | 'list-files'
    | 'locate'
    | 'locked'
    | 'more-horizontal'
    | 'more-vertical'
    | 'move-down'
    | 'move-up'
    | 'open-in-tool-window'
    | 'open-new-tab'
    | 'open'
    | 'pagination'
    | 'paste'
    | 'pin'
    | 'preview-horizontally'
    | 'preview-vertically'
    | 'print'
    | 'project-structure'
    | 'project-wide-analysis-off'
    | 'project-wide-analysis-on'
    | 'redo'
    | 'refresh'
    | 'remove'
    | 'right'
    | 'run-anything'
    | 'save'
    | 'scroll-down'
    | 'search'
    | 'settings'
    | 'show-as-tree'
    | 'show'
    | 'soft-wrap'
    | 'sort-alphabetically'
    | 'sort-by-duration'
    | 'sort-by-type'
    | 'sort-by-usage'
    | 'sort-by-visibility'
    | 'sort-by'
    | 'split-horizontally'
    | 'split-vertically'
    | 'undo'
    | 'unlocked'
    | 'up'
    | 'upload'
    | 'vcs'
    | 'ide-update'
    | 'plugin-update';
  other: 'linkedin' | 'twitter' | 'de' | 'es' | 'fr' | 'it' | 'ru' | 'uk' | 'us';
  'tool-windows':
    | 'ant'
    | 'aws-glue'
    | 'bookmarks'
    | 'build-server-protocol'
    | 'build'
    | 'c-make-tool-window'
    | 'changes'
    | 'commit'
    | 'concurrency-diagram-toolwindow'
    | 'coverage'
    | 'cwm-access'
    | 'cwm-users'
    | 'database-changes'
    | 'dataproc-tool-window'
    | 'dbms'
    | 'debug'
    | 'dependencies'
    | 'documentation'
    | 'donate'
    | 'endpoints'
    | 'exception-analyzer'
    | 'find-external-usages'
    | 'find'
    | 'gitlab'
    | 'gradle'
    | 'hierarchy'
    | 'hive'
    | 'jupyter-tool-window'
    | 'kafka'
    | 'kotlin-tool-window'
    | 'learn'
    | 'makefile-tool-window'
    | 'maven'
    | 'messages'
    | 'notifications'
    | 'npm'
    | 'package-manager'
    | 'problems'
    | 'profiler'
    | 'project'
    | 'pull-requests'
    | 'python-console-tool-window'
    | 'repositories'
    | 'run'
    | 'rust'
    | 'sbt-icon'
    | 'sbt-shell'
    | 'sci-view'
    | 'services'
    | 'setting-sync'
    | 'space-tool-window'
    | 'spring'
    | 'structure'
    | 'task'
    | 'terminal'
    | 'todo'
    | 'transfer'
    | 'unknown'
    | 'vcs'
    | 'web-locator'
    | 'web-server'
    | 'web'
    | 'writerside-preview'
    | 'writerside'
    | 'new-u-i';
};

//#endregion
