/// <reference lib="dom" />
// This file is autogenerated by @neodx/svg
// Do not edit it manually

//#region @neodx/svg runtime utils

/**
 * Fetches the sprite from the given URL and injects it into the DOM.
 * Should be used in the browser environment for loading inline sprites.
 */
async function loadSprite(url: URL | string, parent?: HTMLElement | null) {
  mountSprite(await fetch(url).then(res => res.text()), parent);
}

/**
 * Mounts the sprite content into the DOM.
 * Under the hood, it will wait for the DOM to be ready and then inject the sprite.
 * @example
 * mountSvgSprite('<svg>...</svg>');
 */
function mountSprite(svg: string, parent?: HTMLElement | null) {
  if (typeof window === 'undefined') return;
  // eslint-disable-next-line no-param-reassign
  parent ??= window.document.body;

  if (parent.ownerDocument.readyState === 'loading') {
    parent.ownerDocument.addEventListener('DOMContentLoaded', () => injectSvgSprite(svg, parent));
  } else {
    injectSvgSprite(svg, parent);
  }
}

/**
 * Injects the sprite content into the DOM.
 * @example
 * injectSvgSprite('<svg>...</svg>');
 */
function injectSvgSprite(svg: string, parent: HTMLElement) {
  const host = Object.assign(parent.ownerDocument.createElement('div'), {
    innerHTML: svg
  });

  Object.assign(host.style, {
    pointerEvents: 'none',
    position: 'absolute',
    overflow: 'hidden',
    height: '0',
    width: '0'
  });
  parent.append(host);
}

const defineSpriteMap = <const Sprites extends readonly [...SvgSprite[]]>(all: [...Sprites]) => {
  const map = defineNamedMap(all);

  return {
    ...map,
    /**
     * Safely get symbol by untyped sprite and symbol names.
     *
     * @experimental Current version of this API will be stabilized in v1.0.0
     *
     * @example Accessing symbol with custom template
     * const [spriteName, symbolName] = myName.split('/');
     * const symbol = sprites.get(spriteName, symbolName);
     *
     * if (!symbol) throw new Error(`Symbol "${symbolName}" is not found in "${spriteName}"`);
     */
    experimental_get(spriteName: string, symbolName: string, config?: SpritePrepareConfig) {
      const sprite = map.byName[spriteName as keyof typeof map.byName] as Sprites[number] | null;
      const symbol = sprite?.symbols.byName[symbolName] as SvgSpriteSymbol | null;
      const asset = sprite?.assets.find(it => it.symbols.all.includes(symbol)) as SvgSpriteAsset;
      const href = symbol && sprite?.prepare(asset, symbol, config);

      if (!sprite || !symbol || !asset || !href) return null;
      return { sprite, symbol, asset, href };
    }
  };
};

interface SpritePrepareConfig {
  /** Base URL for external assets */
  baseUrl?: string;
  /** DOM element to inject the sprite into */
  parent?: HTMLElement | null;
  /**
   * Loads the sprite from the given URL and injects it into the DOM.
   *
   * @example simplified default implementation
   * async (url, parent) => mountSprite(await fetch(url).then(res => res.text()), parent)
   */
  loadSprite?: typeof loadSprite;
  /**
   * Mounts the sprite content into the DOM.
   */
  mountSprite?: typeof mountSprite;
}

const defineSprite = <
  const Name extends string,
  const Assets extends readonly [...SvgSpriteAsset[]]
>(
  name: Name,
  assets: [...Assets]
) => {
  const getUrl = (fileName: string, baseUrl?: string) =>
    !baseUrl?.startsWith('http')
      ? `/${baseUrl?.replace(/(^\/)|(\/$)/g, '')}/${fileName}`
      : new URL(fileName, baseUrl);
  const prepareAsset = (
    asset: SvgSpriteAsset,
    {
      parent,
      baseUrl,
      loadSprite: load = loadSprite,
      mountSprite: mount = mountSprite
    }: SpritePrepareConfig = {}
  ) => {
    if (asset.meta.type === 'inject') {
      mount(asset.meta.content, parent);
    }
    if (asset.meta.type === 'fetch-and-inject') {
      load(getUrl(asset.meta.fileName, baseUrl), parent);
    }
  };

  return {
    name,
    assets,
    symbols: defineNamedMap<[...MergeAssetsSymbols<Assets>]>(
      assets.flatMap(asset => asset.symbols.all) as any
    ),
    prepare(asset: SvgSpriteAsset, symbol: SvgSpriteSymbol, config?: SpritePrepareConfig) {
      if (!assets.includes(asset)) return null;
      if (!asset.done) {
        asset.done = true;
        prepareAsset(asset, config);
      }
      switch (asset.meta.type) {
        case 'inject':
        case 'fetch-and-inject':
          return `#${symbol.id}`;
        case 'external':
          return `${getUrl(asset.meta.fileName, config?.baseUrl)}#${symbol.id}`;
        default:
          return null;
      }
    }
  };
};

const defineExternalAssetMeta = (fileName: string) => ({
  type: 'external' as const,
  fileName
});
const defineInjectedAssetMeta = (content: string) => ({
  type: 'inject' as const,
  content
});
const defineFetchAndInjectedAssetMeta = (fileName: string) => ({
  type: 'fetch-and-inject' as const,
  fileName
});
const defineSpriteAsset = <const Symbols extends readonly [...SvgSpriteSymbol[]]>(
  symbols: [...Symbols],
  meta: SpriteAssetMeta
) => ({
  symbols: defineNamedMap(symbols),
  meta,
  done: false
});

type SpriteAssetMeta =
  | ReturnType<typeof defineExternalAssetMeta>
  | ReturnType<typeof defineInjectedAssetMeta>
  | ReturnType<typeof defineFetchAndInjectedAssetMeta>;

const defineNamedMap = <
  const Symbols extends readonly [
    ...{
      name: string;
    }[]
  ]
>(
  all: readonly [...Symbols]
) => ({
  /**
   * List of all items
   * @example
   * console.log(mySprite.symbols.all); // [ { name: 'close', ... }, { name: 'add', ... } ]
   */
  all,
  /**
   * List of all names
   * @example
   * console.log(mySprite.symbols.names); // [ 'close', 'add', ... ]
   */
  names: all.map(symbol => symbol.name) as readonly [
    ...{
      [Index in keyof Symbols]: Symbols[Index]['name'];
    }
  ],
  /**
   * Map of all items where key is the item name and value is the item itself
   * @example Symbols
   * console.log(mySprite.symbols.byName); // { close: { name: 'close', ... }, ... }
   * @example Sprites
   * console.log(sprites.byName.common); // { name: 'common', symbols: { ... } }
   */
  byName: Object.fromEntries(all.map(symbol => [symbol.name, symbol])) as {
    [S in Symbols[number] as S['name']]: S;
  }
});

const defineSpriteSymbol = <const Name extends string>(
  name: Name,
  width: number,
  height: number,
  viewBox?: string,
  id: string = name
) => ({
  id,
  name,
  width,
  height,
  viewBox: viewBox ?? `0 0 ${width} ${height}`
});

type MergeAssetsSymbols<
  Assets extends readonly [...SvgSpriteAsset[]],
  Result extends SvgSpriteSymbol[] = []
> = Assets extends [SvgSpriteAsset<infer Symbols>, ...infer Tail extends readonly SvgSpriteAsset[]]
  ? MergeAssetsSymbols<Tail, [...Result, ...Symbols]>
  : Result;

type SvgSpriteSymbol<Name extends string = any> = ReturnType<typeof defineSpriteSymbol<Name>>;
type SvgSprite<
  Name extends string = any,
  Assets extends readonly [...SvgSpriteAsset[]] = any
> = ReturnType<typeof defineSprite<Name, Assets>>;

type SvgSpriteAsset<Symbols extends readonly [...SvgSpriteSymbol[]] = any> = ReturnType<
  typeof defineSpriteAsset<Symbols>
>;

//#endregion

//#region autogenerated sprites

export const sprites = defineSpriteMap([
  defineSprite('general', [
    defineSpriteAsset(
      [
        defineSpriteSymbol('autoscroll-from-source', 16, 16),
        defineSpriteSymbol('autoscroll-to-source', 16, 16),
        defineSpriteSymbol('checkmark', 16, 16),
        defineSpriteSymbol('chevron-down-large', 16, 16),
        defineSpriteSymbol('chevron-down', 16, 16),
        defineSpriteSymbol('chevron-left', 16, 16),
        defineSpriteSymbol('chevron-right', 16, 16),
        defineSpriteSymbol('chevron-up-large', 16, 16),
        defineSpriteSymbol('chevron-up', 16, 16),
        defineSpriteSymbol('close-small-hovered', 16, 16),
        defineSpriteSymbol('close-small', 16, 16),
        defineSpriteSymbol('close', 16, 16),
        defineSpriteSymbol('collapse-all', 16, 16),
        defineSpriteSymbol('copy', 16, 16),
        defineSpriteSymbol('cut', 16, 16),
        defineSpriteSymbol('delete', 16, 16),
        defineSpriteSymbol('down', 16, 16),
        defineSpriteSymbol('download', 16, 16),
        defineSpriteSymbol('edit', 16, 16),
        defineSpriteSymbol('exit', 16, 16),
        defineSpriteSymbol('expand-all', 16, 16),
        defineSpriteSymbol('export', 16, 16),
        defineSpriteSymbol('external-link', 16, 16),
        defineSpriteSymbol('filter', 16, 16),
        defineSpriteSymbol('groups', 16, 16),
        defineSpriteSymbol('help', 16, 16),
        defineSpriteSymbol('hide', 16, 16),
        defineSpriteSymbol('history', 16, 16),
        defineSpriteSymbol('import', 16, 16),
        defineSpriteSymbol('layout', 16, 16),
        defineSpriteSymbol('left', 16, 16),
        defineSpriteSymbol('list-files', 16, 16),
        defineSpriteSymbol('locate', 16, 16),
        defineSpriteSymbol('locked', 16, 16),
        defineSpriteSymbol('more-horizontal', 16, 16),
        defineSpriteSymbol('more-vertical', 16, 16),
        defineSpriteSymbol('move-down', 16, 16),
        defineSpriteSymbol('move-up', 16, 16),
        defineSpriteSymbol('open-in-tool-window', 16, 16),
        defineSpriteSymbol('open-new-tab', 16, 16),
        defineSpriteSymbol('open', 16, 16),
        defineSpriteSymbol('pagination', 16, 16),
        defineSpriteSymbol('paste', 16, 16),
        defineSpriteSymbol('pin', 16, 16),
        defineSpriteSymbol('preview-horizontally', 16, 16),
        defineSpriteSymbol('preview-vertically', 16, 16),
        defineSpriteSymbol('print', 16, 16),
        defineSpriteSymbol('project-structure', 16, 16),
        defineSpriteSymbol('project-wide-analysis-off', 16, 16),
        defineSpriteSymbol('project-wide-analysis-on', 16, 16),
        defineSpriteSymbol('redo', 16, 16),
        defineSpriteSymbol('refresh', 16, 16),
        defineSpriteSymbol('remove', 16, 16),
        defineSpriteSymbol('right', 16, 16),
        defineSpriteSymbol('run-anything', 16, 16),
        defineSpriteSymbol('save', 16, 16),
        defineSpriteSymbol('scroll-down', 16, 16),
        defineSpriteSymbol('search', 16, 16),
        defineSpriteSymbol('settings', 16, 16),
        defineSpriteSymbol('show-as-tree', 16, 16),
        defineSpriteSymbol('show', 16, 16),
        defineSpriteSymbol('soft-wrap', 16, 16),
        defineSpriteSymbol('sort-alphabetically', 16, 16),
        defineSpriteSymbol('sort-by-duration', 16, 16),
        defineSpriteSymbol('sort-by-type', 16, 16),
        defineSpriteSymbol('sort-by-usage', 16, 16),
        defineSpriteSymbol('sort-by-visibility', 16, 16),
        defineSpriteSymbol('sort-by', 16, 16),
        defineSpriteSymbol('split-horizontally', 16, 16),
        defineSpriteSymbol('split-vertically', 16, 16),
        defineSpriteSymbol('undo', 16, 16),
        defineSpriteSymbol('unlocked', 16, 16),
        defineSpriteSymbol('up', 16, 16),
        defineSpriteSymbol('upload', 16, 16),
        defineSpriteSymbol('vcs', 16, 16)
      ],
      defineExternalAssetMeta('general.7013ce0c.svg')
    ),
    defineSpriteAsset(
      [
        defineSpriteSymbol('ide-update', 16, 16, undefined, 'general-ide-update-86493ec5'),
        defineSpriteSymbol('plugin-update', 16, 16, undefined, 'general-plugin-update-530f2307')
      ],
      defineInjectedAssetMeta(
        '<svg width="0" height="0"><defs><clipPath id="general-ide-update-ref-a-86493ec5"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath><clipPath id="general-plugin-update-ref-a-530f2307"><path fill="#fff" d="M16 0H0v16h16z"/></clipPath></defs><symbol xmlns="http://www.w3.org/2000/svg" id="general-ide-update-86493ec5" fill="none" viewBox="0 0 16 16"><g fill="#E66D17" clip-path="url(#general-ide-update-ref-a-86493ec5)"><path d="m8.5 5.207 2.646 2.647a.5.5 0 0 0 .708-.708l-3.5-3.5a.5.5 0 0 0-.708 0l-3.5 3.5a.5.5 0 1 0 .708.708L7.5 5.207V12a.5.5 0 0 0 1 0z"/><path fill-rule="evenodd" d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m0-1A7 7 0 1 0 8 1a7 7 0 0 0 0 14" clip-rule="evenodd"/></g></symbol><symbol xmlns="http://www.w3.org/2000/svg" id="general-plugin-update-530f2307" fill="none" viewBox="0 0 16 16"><g fill="#3574F0" clip-path="url(#general-plugin-update-ref-a-530f2307)"><path d="m8.5 5.207 2.646 2.647a.5.5 0 0 0 .708-.708l-3.5-3.5a.5.5 0 0 0-.708 0l-3.5 3.5a.5.5 0 1 0 .708.708L7.5 5.207V12a.5.5 0 0 0 1 0z"/><path fill-rule="evenodd" d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m0-1A7 7 0 1 0 8 1a7 7 0 0 0 0 14" clip-rule="evenodd"/></g></symbol></svg>'
      )
    )
  ]),
  defineSprite('global', [
    defineSpriteAsset(
      [defineSpriteSymbol('theme-light', 16, 16)],
      defineExternalAssetMeta('global.f9b62255.svg')
    )
  ]),
  defineSprite('tool-windows', [
    defineSpriteAsset(
      [
        defineSpriteSymbol('ant', 16, 16),
        defineSpriteSymbol('aws-glue', 13, 13),
        defineSpriteSymbol('bookmarks', 16, 16),
        defineSpriteSymbol('build-server-protocol', 16, 16),
        defineSpriteSymbol('build', 16, 16),
        defineSpriteSymbol('c-make-tool-window', 16, 16),
        defineSpriteSymbol('changes', 16, 16),
        defineSpriteSymbol('commit', 16, 16),
        defineSpriteSymbol('concurrency-diagram-toolwindow', 16, 16),
        defineSpriteSymbol('coverage', 16, 16),
        defineSpriteSymbol('cwm-access', 16, 16),
        defineSpriteSymbol('cwm-users', 16, 16),
        defineSpriteSymbol('database-changes', 16, 16),
        defineSpriteSymbol('dataproc-tool-window', 16, 16),
        defineSpriteSymbol('dbms', 16, 16),
        defineSpriteSymbol('debug', 16, 16),
        defineSpriteSymbol('dependencies', 16, 16),
        defineSpriteSymbol('documentation', 16, 16),
        defineSpriteSymbol('donate', 16, 16),
        defineSpriteSymbol('endpoints', 16, 16),
        defineSpriteSymbol('exception-analyzer', 16, 16),
        defineSpriteSymbol('find-external-usages', 16, 16),
        defineSpriteSymbol('find', 16, 16),
        defineSpriteSymbol('gitlab', 16, 16),
        defineSpriteSymbol('gradle', 16, 16),
        defineSpriteSymbol('hierarchy', 16, 16),
        defineSpriteSymbol('hive', 16, 16),
        defineSpriteSymbol('jupyter-tool-window', 16, 16),
        defineSpriteSymbol('kafka', 15, 15),
        defineSpriteSymbol('kotlin-tool-window', 16, 16),
        defineSpriteSymbol('learn', 16, 16),
        defineSpriteSymbol('makefile-tool-window', 16, 16),
        defineSpriteSymbol('maven', 16, 16),
        defineSpriteSymbol('messages', 16, 16),
        defineSpriteSymbol('notifications', 16, 16),
        defineSpriteSymbol('npm', 16, 16),
        defineSpriteSymbol('package-manager', 16, 16),
        defineSpriteSymbol('problems', 16, 16),
        defineSpriteSymbol('profiler', 16, 16),
        defineSpriteSymbol('project', 16, 16),
        defineSpriteSymbol('pull-requests', 16, 16),
        defineSpriteSymbol('python-console-tool-window', 16, 16),
        defineSpriteSymbol('repositories', 16, 16),
        defineSpriteSymbol('run', 16, 16),
        defineSpriteSymbol('rust', 16, 16),
        defineSpriteSymbol('sbt-icon', 16, 16),
        defineSpriteSymbol('sbt-shell', 16, 16),
        defineSpriteSymbol('sci-view', 16, 16),
        defineSpriteSymbol('services', 16, 16),
        defineSpriteSymbol('setting-sync', 16, 16),
        defineSpriteSymbol('space-tool-window', 16, 16),
        defineSpriteSymbol('spring', 16, 16),
        defineSpriteSymbol('structure', 16, 16),
        defineSpriteSymbol('task', 16, 16),
        defineSpriteSymbol('terminal', 16, 16),
        defineSpriteSymbol('todo', 16, 16),
        defineSpriteSymbol('transfer', 16, 16),
        defineSpriteSymbol('unknown', 16, 16),
        defineSpriteSymbol('vcs', 16, 16),
        defineSpriteSymbol('web-locator', 16, 16),
        defineSpriteSymbol('web-server', 16, 16),
        defineSpriteSymbol('web', 16, 16),
        defineSpriteSymbol('writerside-preview', 16, 16),
        defineSpriteSymbol('writerside', 16, 16)
      ],
      defineExternalAssetMeta('tool-windows.94c5ce95.svg')
    ),
    defineSpriteAsset(
      [defineSpriteSymbol('new-u-i', 16, 16, undefined, 'tool-windows-new-u-i-65e30001')],
      defineInjectedAssetMeta(
        '<svg width="0" height="0"><defs><clipPath id="tool-windows-new-u-i-ref-a-65e30001"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs><symbol xmlns="http://www.w3.org/2000/svg" id="tool-windows-new-u-i-65e30001" fill="none" viewBox="0 0 16 16"><g clip-path="url(#tool-windows-new-u-i-ref-a-65e30001)"><path stroke="currentColor" d="M5.346 6.358C6.328 5.383 7.007 4.14 7.5 2.57c.493 1.571 1.172 2.813 2.155 3.788.981.974 2.234 1.65 3.824 2.142-1.59.492-2.843 1.168-3.824 2.142-.983.975-1.662 2.216-2.155 3.788-.493-1.572-1.172-2.813-2.154-3.788S3.112 8.992 1.522 8.5c1.59-.492 2.842-1.168 3.824-2.142Z"/><path fill="currentColor" d="M12.993 4.907a1.905 1.905 0 1 0 0-3.81 1.905 1.905 0 0 0 0 3.81"/></g></symbol></svg>'
      )
    )
  ])
]);

export interface SpritesMeta {
  general:
    | 'autoscroll-from-source'
    | 'autoscroll-to-source'
    | 'checkmark'
    | 'chevron-down-large'
    | 'chevron-down'
    | 'chevron-left'
    | 'chevron-right'
    | 'chevron-up-large'
    | 'chevron-up'
    | 'close-small-hovered'
    | 'close-small'
    | 'close'
    | 'collapse-all'
    | 'copy'
    | 'cut'
    | 'delete'
    | 'down'
    | 'download'
    | 'edit'
    | 'exit'
    | 'expand-all'
    | 'export'
    | 'external-link'
    | 'filter'
    | 'groups'
    | 'help'
    | 'hide'
    | 'history'
    | 'import'
    | 'layout'
    | 'left'
    | 'list-files'
    | 'locate'
    | 'locked'
    | 'more-horizontal'
    | 'more-vertical'
    | 'move-down'
    | 'move-up'
    | 'open-in-tool-window'
    | 'open-new-tab'
    | 'open'
    | 'pagination'
    | 'paste'
    | 'pin'
    | 'preview-horizontally'
    | 'preview-vertically'
    | 'print'
    | 'project-structure'
    | 'project-wide-analysis-off'
    | 'project-wide-analysis-on'
    | 'redo'
    | 'refresh'
    | 'remove'
    | 'right'
    | 'run-anything'
    | 'save'
    | 'scroll-down'
    | 'search'
    | 'settings'
    | 'show-as-tree'
    | 'show'
    | 'soft-wrap'
    | 'sort-alphabetically'
    | 'sort-by-duration'
    | 'sort-by-type'
    | 'sort-by-usage'
    | 'sort-by-visibility'
    | 'sort-by'
    | 'split-horizontally'
    | 'split-vertically'
    | 'undo'
    | 'unlocked'
    | 'up'
    | 'upload'
    | 'vcs'
    | 'ide-update'
    | 'plugin-update';
  global: 'theme-light';
  'tool-windows':
    | 'ant'
    | 'aws-glue'
    | 'bookmarks'
    | 'build-server-protocol'
    | 'build'
    | 'c-make-tool-window'
    | 'changes'
    | 'commit'
    | 'concurrency-diagram-toolwindow'
    | 'coverage'
    | 'cwm-access'
    | 'cwm-users'
    | 'database-changes'
    | 'dataproc-tool-window'
    | 'dbms'
    | 'debug'
    | 'dependencies'
    | 'documentation'
    | 'donate'
    | 'endpoints'
    | 'exception-analyzer'
    | 'find-external-usages'
    | 'find'
    | 'gitlab'
    | 'gradle'
    | 'hierarchy'
    | 'hive'
    | 'jupyter-tool-window'
    | 'kafka'
    | 'kotlin-tool-window'
    | 'learn'
    | 'makefile-tool-window'
    | 'maven'
    | 'messages'
    | 'notifications'
    | 'npm'
    | 'package-manager'
    | 'problems'
    | 'profiler'
    | 'project'
    | 'pull-requests'
    | 'python-console-tool-window'
    | 'repositories'
    | 'run'
    | 'rust'
    | 'sbt-icon'
    | 'sbt-shell'
    | 'sci-view'
    | 'services'
    | 'setting-sync'
    | 'space-tool-window'
    | 'spring'
    | 'structure'
    | 'task'
    | 'terminal'
    | 'todo'
    | 'transfer'
    | 'unknown'
    | 'vcs'
    | 'web-locator'
    | 'web-server'
    | 'web'
    | 'writerside-preview'
    | 'writerside'
    | 'new-u-i';
}

//#endregion
